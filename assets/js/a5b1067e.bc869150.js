"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3363],{4684:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var n=t(5893),o=t(1151);const s={title:"tRPC",description:"See more about how to integrate with tRPC."},a=void 0,i={id:"main/frameworks/trpc",title:"tRPC",description:"See more about how to integrate with tRPC.",source:"@site/docs/main/frameworks/trpc.mdx",sourceDirName:"main/frameworks",slug:"/main/frameworks/trpc",permalink:"/docs/main/frameworks/trpc",draft:!1,unlisted:!1,editUrl:"https://github.com/H4ad/serverless-adapter/tree/main/www/docs/main/frameworks/trpc.mdx",tags:[],version:"current",frontMatter:{title:"tRPC",description:"See more about how to integrate with tRPC."},sidebar:"main",previous:{title:"Polka",permalink:"/docs/main/frameworks/polka"},next:{title:"Helpers",permalink:"/docs/category/helpers"}},c={},p=[{value:"Integrating with Adapters",id:"integrating-with-adapters",level:2},{value:"Default Context and Custom context",id:"default-context-and-custom-context",level:2}];function d(e){const r={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.admonition,{type:"info",children:(0,n.jsx)(r.p,{children:"The following examples only work with tRPC over HTTP, you cannot use this framework to support websocket or subscriptions."})}),"\n",(0,n.jsx)(r.p,{children:"First, you need to ensure you have the libs installed, so run this code:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-bash",children:"npm i --save @trpc/server body-parser\n"})}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"body-parser"})," is needed to parse the body of the request to JSON."]}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["Then, you just need to use the ",(0,n.jsx)(r.a,{href:"../../api/Frameworks/TrpcFramework",children:"TrpcFramework"})," when you create your adapter, like:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",metastring:'title="index.ts"',children:"import * as trpc from '@trpc/server';\r\nimport { ServerlessAdapter } from '@h4ad/serverless-adapter';\r\nimport { TrpcFramework, TrpcAdapterContext, TrpcFrameworkOptions } from '@h4ad/serverless-adapter/frameworks/trpc';\r\nimport { JsonBodyParserFramework } from '@h4ad/serverless-adapter/frameworks/body-parser';\r\nimport { CorsFramework } from '@h4ad/serverless-adapter/frameworks/cors';\r\nimport { z } from 'zod';\r\n\r\ntype CustomContext = { currentDate: Date };\r\ntype TrpcContext = TrpcAdapterContext<CustomContext>;\r\n\r\nconst t = trpc.initTRPC.context<TrpcContext>().create();\r\nconst appRouter = t.router({\r\n  getUser: t.procedure.input(z.string()).query((req) => {\r\n    req.input; // string\r\n    return { id: req.input, name: 'Bilbo' };\r\n  }),\r\n  createUser: t.procedure\r\n    // validate input with Zod\r\n    .input(z.object({ name: z.string().min(5) }))\r\n    .mutation(({ input }) => {\r\n      return {\r\n        created: true,\r\n        newName: input.name,\r\n      };\r\n    })\r\n});\r\n\r\nconst frameworkOptions: TrpcFrameworkOptions<CustomContext> = {\r\n  createContext: () => ({ currentDate: new Date() }),\r\n};\r\n\r\nconst framework = new TrpcFramework<TrpcContext>(frameworkOptions);\r\nconst jsonFramework = new JsonBodyParserFramework(framework);\r\nconst corsFramework = new CorsFramework(jsonFramework); // see more about: https://serverless-adapter.viniciusl.com.br/docs/main/frameworks/cors\r\n\r\nexport const handler = ServerlessAdapter.new(appRouter)\r\n  .setFramework(corsFramework)\r\n  // continue to set the other options here.\r\n  //.setHandler(new DefaultHandler())\r\n  //.setResolver(new PromiseResolver())\r\n  //.addAdapter(new AlbAdapter())\r\n  //.addAdapter(new SQSAdapter())\r\n  //.addAdapter(new SNSAdapter())\r\n  // after put all methods necessary, just call the build method.\r\n  .build();\n"})}),"\n",(0,n.jsx)(r.admonition,{type:"tip",children:(0,n.jsxs)(r.p,{children:["Need more examples? See more examples ",(0,n.jsx)(r.a,{href:"https://github.com/H4ad/serverless-adapter-examples#trpc",children:"here"}),"."]})}),"\n",(0,n.jsx)(r.h2,{id:"integrating-with-adapters",children:"Integrating with Adapters"}),"\n",(0,n.jsx)(r.p,{children:"This framework is a little special when dealing with request URLs because of the structure of tRPC."}),"\n",(0,n.jsxs)(r.p,{children:["So when you integrate with an adapter like ",(0,n.jsx)(r.a,{href:"/docs/main/adapters/aws/sqs",children:"SQSAdapter"}),", when you receive an event, the adapter will forward the request to ",(0,n.jsx)(r.code,{children:"/sqs"})," by default\r\nbut because of the structure of tRPC, the framework will change the request URL to just ",(0,n.jsx)(r.code,{children:"sqs"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["With this behavior, to integrate with ",(0,n.jsx)(r.a,{href:"/docs/main/adapters/aws/sqs",children:"SQSAdapter"}),", you will create the following mutation:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",metastring:'title="index.ts"',children:"import type { SQSEvent } from 'aws-lambda';\r\nimport * as trpc from '@trpc/server';\r\nimport { TrpcAdapterContext } from '@h4ad/serverless-adapter/frameworks/trpc';\r\nimport { z } from 'zod';\r\n\r\ntype TrpcContext = TrpcAdapterContext<unknown>;\r\n\r\nconst t = trpc.initTRPC.context<TrpcContext>().create();\r\n\r\nconst appRouter = t.router({\r\n  sqs: t.procedure\r\n    .input(z.object({Records: z.array(z.any())}))\r\n    .mutation(({ctx, input}) => {\r\n      if (ctx.getHeader('host') !== 'sqs.amazonaws.com')\r\n        throw new TRPCError({\r\n          code: 'UNAUTHORIZED',\r\n          message: 'Wrong host.',\r\n        });\r\n\r\n      const event = input as SQSEvent;\r\n\r\n      // Do whatever you want\r\n      // and you dont need to return nothing\r\n    }),\r\n});\n"})}),"\n",(0,n.jsx)(r.admonition,{title:"About another adapters",type:"warning",children:(0,n.jsx)(r.p,{children:"Never forget to check the host header as you could introduce a security hole when adding support for AWS Api Gateway and other adapters."})}),"\n",(0,n.jsx)(r.admonition,{type:"tip",children:(0,n.jsxs)(r.p,{children:["You can see a working example ",(0,n.jsx)(r.a,{href:"https://github.com/H4ad/serverless-adapter-examples/tree/master/src/trpc/aws/api-gateway-v2-and-sqs.entry.ts",children:"here"}),"."]})}),"\n",(0,n.jsx)(r.h2,{id:"default-context-and-custom-context",children:"Default Context and Custom context"}),"\n",(0,n.jsxs)(r.p,{children:["By default, we provide you with a few methods to get information from the request and modify the response,\r\nto learn more, take a look at ",(0,n.jsx)(r.a,{href:"../../api/Frameworks/TrpcFramework/TrpcAdapterBaseContext",children:"TrpcAdapterBaseContext"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["Also, you can pass new properties to the context by setting the ",(0,n.jsx)(r.code,{children:"createContext"})," function inside the options,\r\nlike the code below:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-typescript",metastring:'title="index.ts"',children:"import * as trpc from '@trpc/server';\r\nimport { ServerlessAdapter } from '@h4ad/serverless-adapter';\r\nimport { TrpcFramework, TrpcAdapterContext, TrpcFrameworkOptions } from '@h4ad/serverless-adapter/frameworks/trpc';\r\nimport { JsonBodyParserFramework } from '@h4ad/serverless-adapter/frameworks/body-parser';\r\nimport { CorsFramework } from '@h4ad/serverless-adapter/frameworks/cors';\r\n\r\ntype CustomContext = { potato: boolean };\r\ntype TrpcContext = TrpcAdapterContext<CustomContext>;\r\n\r\nconst t = trpc.initTRPC.context<TrpcContext>().create();\r\nconst appRouter = t.router({\r\n  add: t.procedure\r\n    .mutation(({ ctx }) => {\r\n      // get the request url\r\n      const requestUrl = ctx.getUrl();\r\n\r\n      // this will change the status code of the request to 204.\r\n      ctx.setStatus(204);\r\n    }),\r\n});\r\n\r\nconst frameworkOptions: TrpcFrameworkOptions<TrpcContext> = {\r\n  // you can return a promise\r\n  createContext: () => Promise.resolve({ potato: true }),\r\n  // createContext: () => ({ potato: false }),\r\n};\r\n\r\nconst framework = new TrpcFramework<TrpcContext>(frameworkOptions);\r\nconst jsonFramework = new JsonBodyParserFramework(framework);\r\nconst corsFramework = new CorsFramework(jsonFramework); // see more about: https://serverless-adapter.viniciusl.com.br/docs/main/frameworks/cors\r\n\r\nexport const handler = ServerlessAdapter.new(appRouter)\r\n  .setFramework(corsFramework)\r\n  // continue to set the other options here.\r\n  //.setHandler(new DefaultHandler())\r\n  //.setResolver(new PromiseResolver())\r\n  //.addAdapter(new AlbAdapter())\r\n  //.addAdapter(new SQSAdapter())\r\n  //.addAdapter(new SNSAdapter())\r\n  // after put all methods necessary, just call the build method.\r\n  .build();\n"})}),"\n",(0,n.jsx)(r.admonition,{type:"tip",children:(0,n.jsxs)(r.p,{children:["Is your application instance creation asynchronous? Look the ",(0,n.jsx)(r.a,{href:"./helpers/lazy",children:"LazyFramework"})," which helps you in asynchronous startup."]})}),"\n",(0,n.jsx)(r.admonition,{type:"tip",children:(0,n.jsxs)(r.p,{children:["Need to deal with CORS? See ",(0,n.jsx)(r.a,{href:"./helpers/cors",children:"CorsFramework"})," which helps you to add correct headers."]})})]})}function l(e={}){const{wrapper:r}={...(0,o.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,r,t)=>{t.d(r,{Z:()=>i,a:()=>a});var n=t(7294);const o={},s=n.createContext(o);function a(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);