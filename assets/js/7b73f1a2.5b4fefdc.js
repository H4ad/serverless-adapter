"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2800],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return k}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=a.createContext({}),i=function(e){var t=a.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},d=function(e){var t=i(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=i(r),k=n,h=m["".concat(o,".").concat(k)]||m[k]||u[k]||l;return r?a.createElement(h,p(p({ref:t},d),{},{components:r})):a.createElement(h,p({ref:t},d))}));function k(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,p=new Array(l);p[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,p[1]=s;for(var i=2;i<l;i++)p[i]=r[i];return a.createElement.apply(null,p)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3481:function(e,t,r){r.r(t),r.d(t,{assets:function(){return d},contentTitle:function(){return o},default:function(){return k},frontMatter:function(){return s},metadata:function(){return i},toc:function(){return u}});var a=r(7462),n=r(3366),l=(r(7294),r(3905)),p=["components"],s={},o=void 0,i={unversionedId:"api/ServerlessAdapter/ServerlessAdapter",id:"api/ServerlessAdapter/ServerlessAdapter",title:"ServerlessAdapter",description:"@h4ad/serverless-adapter &gt; ServerlessAdapter",source:"@site/docs/api/ServerlessAdapter/ServerlessAdapter.md",sourceDirName:"api/ServerlessAdapter",slug:"/api/ServerlessAdapter/",permalink:"/docs/api/ServerlessAdapter/",editUrl:"https://github.com/H4ad/serverless-adapter/tree/main/www/docs/api/ServerlessAdapter/ServerlessAdapter.md",tags:[],version:"current",frontMatter:{},sidebar:"api",previous:{title:"PromiseResolver",permalink:"/docs/api/Resolvers/PromiseResolver/"},next:{title:"BinarySettings",permalink:"/docs/api/Types/BinarySettings/"}},d={},u=[{value:"(class) ServerlessAdapter",id:"class-serverlessadapter",level:2},{value:"Example",id:"example",level:2},{value:"(property) adapters",id:"property-adapters",level:2},{value:"(method) addAdapter",id:"method-addadapter",level:2},{value:"Parameters",id:"parameters",level:3},{value:"(property) app",id:"property-app",level:2},{value:"(property) binarySettings",id:"property-binarysettings",level:2},{value:"(method) build",id:"method-build",level:2},{value:"(property) framework",id:"property-framework",level:2},{value:"(property) handler",id:"property-handler",level:2},{value:"(property) log",id:"property-log",level:2},{value:"(method) new",id:"method-new",level:2},{value:"Parameters",id:"parameters-1",level:3},{value:"(property) resolver",id:"property-resolver",level:2},{value:"(property) respondWithErrors",id:"property-respondwitherrors",level:2},{value:"Remarks",id:"remarks",level:2},{value:"(method) setBinarySettings",id:"method-setbinarysettings",level:2},{value:"Parameters",id:"parameters-2",level:3},{value:"(method) setFramework",id:"method-setframework",level:2},{value:"Parameters",id:"parameters-3",level:3},{value:"(method) setHandler",id:"method-sethandler",level:2},{value:"Parameters",id:"parameters-4",level:3},{value:"(method) setLogger",id:"method-setlogger",level:2},{value:"Parameters",id:"parameters-5",level:3},{value:"(method) setResolver",id:"method-setresolver",level:2},{value:"Parameters",id:"parameters-6",level:3},{value:"(method) setRespondWithErrors",id:"method-setrespondwitherrors",level:2},{value:"Parameters",id:"parameters-7",level:3}],m={toc:u};function k(e){var t=e.components,r=(0,n.Z)(e,p);return(0,l.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/api/Introduction"},"@h4ad/serverless-adapter")," ",">"," ",(0,l.kt)("a",{parentName:"p",href:"/docs/api/ServerlessAdapter"},"ServerlessAdapter")),(0,l.kt)("h2",{id:"class-serverlessadapter"},"(class) ServerlessAdapter"),(0,l.kt)("p",null,"The class used to build the serverless handler."),(0,l.kt)("p",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"export declare class ServerlessAdapter<TApp, TEvent, TContext, TCallback, TResponse, TReturn> \n")),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const app = express();\nexport const handler = ServerlessAdapter.new(app)\n  .setFramework(new ExpressFramework())\n  .setHandler(new DefaultHandler())\n  .setResolver(new PromiseResolver())\n  .setRespondWithErrors(true)\n  .addAdapter(new AlbAdapter())\n  .addAdapter(new SQSAdapter())\n  .addAdapter(new SNSAdapter())\n  .build();\n")),(0,l.kt)("h2",{id:"property-adapters"},"(property) adapters"),(0,l.kt)("p",null,"The list of adapters used to handle an event's request and response"),(0,l.kt)("p",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"protected adapters: AdapterContract<TEvent, TContext, TResponse>[];\n")),(0,l.kt)("h2",{id:"method-addadapter"},"(method) addAdapter"),(0,l.kt)("p",null,"Add an adapter to the adapters list to handle the event coming from any serverless event source"),(0,l.kt)("p",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"addAdapter(adapter: AdapterContract<TEvent, TContext, TResponse>): Pick<this, 'addAdapter' | 'build'>;\n")),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"adapter"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/Contracts/AdapterContract"},"AdapterContract")," ","<","TEvent, TContext, TResponse",">"),(0,l.kt)("td",{parentName:"tr",align:null},"The implementation of the adapter contract")))),(0,l.kt)("p",null,"Returns:"),(0,l.kt)("p",null,"Pick","<","this, 'addAdapter' ","|"," 'build'",">"),(0,l.kt)("h2",{id:"property-app"},"(property) app"),(0,l.kt)("p",null,"The instance of the app (express, hapi, koa, etc...)"),(0,l.kt)("p",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"protected app: TApp;\n")),(0,l.kt)("h2",{id:"property-binarysettings"},"(property) binarySettings"),(0,l.kt)("p",null,"Settings for whether the response should be treated as binary or not"),(0,l.kt)("p",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"protected binarySettings: BinarySettings;\n")),(0,l.kt)("h2",{id:"method-build"},"(method) build"),(0,l.kt)("p",null,"The builder method that returns the handler function to be exported for serverless consumption"),(0,l.kt)("p",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"build(): ServerlessHandler<TReturn>;\n")),(0,l.kt)("p",null,"Returns:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/api/Contracts/HandlerContract/ServerlessHandler"},"ServerlessHandler")," ","<","TReturn",">"),(0,l.kt)("h2",{id:"property-framework"},"(property) framework"),(0,l.kt)("p",null,"The framework that will process requests"),(0,l.kt)("p",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"protected framework?: FrameworkContract<TApp>;\n")),(0,l.kt)("h2",{id:"property-handler"},"(property) handler"),(0,l.kt)("p",null,"The handler that will get the event, context and callback and pass it to the adapter and framework"),(0,l.kt)("p",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"protected handler?: HandlerContract<TApp, TEvent, TContext, TCallback, TResponse, TReturn>;\n")),(0,l.kt)("h2",{id:"property-log"},"(property) log"),(0,l.kt)("p",null,"The instance of the logger service"),(0,l.kt)("p",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"protected log: ILogger;\n")),(0,l.kt)("h2",{id:"method-new"},"(method) new"),(0,l.kt)("p",null,"Creates a new instance of the builder with app (express, hapi, koa, etc...)"),(0,l.kt)("p",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"static new<TApp, TEvent, TContext = any, TCallback = any, TResponse = any, TReturn = any>(app: TApp): ServerlessAdapter<TApp, TEvent, TContext, TCallback, TResponse, TReturn>;\n")),(0,l.kt)("h3",{id:"parameters-1"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"app"),(0,l.kt)("td",{parentName:"tr",align:null},"TApp"),(0,l.kt)("td",{parentName:"tr",align:null},"The instance of the app")))),(0,l.kt)("p",null,"Returns:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/api/ServerlessAdapter"},"ServerlessAdapter")," ","<","TApp, TEvent, TContext, TCallback, TResponse, TReturn",">"),(0,l.kt)("h2",{id:"property-resolver"},"(property) resolver"),(0,l.kt)("p",null,"The resolver that aims to resolve the response to serverless and stop its execution when the request ends"),(0,l.kt)("p",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"protected resolver?: ResolverContract<TEvent, TContext, TCallback, TResponse, TReturn>;\n")),(0,l.kt)("h2",{id:"property-respondwitherrors"},"(property) respondWithErrors"),(0,l.kt)("p",null,"Indicates whether the error stack should be included in the response or not"),(0,l.kt)("p",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"protected respondWithErrors: boolean;\n")),(0,l.kt)("h2",{id:"remarks"},"Remarks"),(0,l.kt)("p",null,"These errors will only be included when an error occurs while forwarding the event to the framework"),(0,l.kt)("h2",{id:"method-setbinarysettings"},"(method) setBinarySettings"),(0,l.kt)("p",null,"Defines the binary settings for whether the response should be treated as binary or not"),(0,l.kt)("p",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"setBinarySettings(binarySettings: BinarySettings): Omit<this, 'setBinarySettings'>;\n")),(0,l.kt)("h3",{id:"parameters-2"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"binarySettings"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/Types/BinarySettings"},"BinarySettings")),(0,l.kt)("td",{parentName:"tr",align:null},"The binary settings")))),(0,l.kt)("p",null,"Returns:"),(0,l.kt)("p",null,"Omit","<","this, 'setBinarySettings'",">"),(0,l.kt)("h2",{id:"method-setframework"},"(method) setFramework"),(0,l.kt)("p",null,"Defines the framework that will process requests"),(0,l.kt)("p",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"setFramework(framework: FrameworkContract<TApp>): Omit<this, 'setFramework'>;\n")),(0,l.kt)("h3",{id:"parameters-3"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"framework"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/Contracts/FrameworkContract"},"FrameworkContract")," ","<","TApp",">"),(0,l.kt)("td",{parentName:"tr",align:null},"The implementation of the framework contract")))),(0,l.kt)("p",null,"Returns:"),(0,l.kt)("p",null,"Omit","<","this, 'setFramework'",">"),(0,l.kt)("h2",{id:"method-sethandler"},"(method) setHandler"),(0,l.kt)("p",null,"Defines the handler that will get the event, context and callback and pass it to the adapter and framework"),(0,l.kt)("p",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"setHandler(handler: HandlerContract<TApp, TEvent, TContext, TCallback, TResponse, TReturn>): Omit<this, 'setHandler'>;\n")),(0,l.kt)("h3",{id:"parameters-4"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"handler"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/Contracts/HandlerContract"},"HandlerContract")," ","<","TApp, TEvent, TContext, TCallback, TResponse, TReturn",">"),(0,l.kt)("td",{parentName:"tr",align:null},"The implementation of the handler contract")))),(0,l.kt)("p",null,"Returns:"),(0,l.kt)("p",null,"Omit","<","this, 'setHandler'",">"),(0,l.kt)("h2",{id:"method-setlogger"},"(method) setLogger"),(0,l.kt)("p",null,"Defines the logger service used during the execution of the handler"),(0,l.kt)("p",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"setLogger(logger: ILogger): Omit<this, 'setLogger'>;\n")),(0,l.kt)("h3",{id:"parameters-5"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"logger"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/Core/Logger/ILogger"},"ILogger")),(0,l.kt)("td",{parentName:"tr",align:null},"The implementation of the logger")))),(0,l.kt)("p",null,"Returns:"),(0,l.kt)("p",null,"Omit","<","this, 'setLogger'",">"),(0,l.kt)("h2",{id:"method-setresolver"},"(method) setResolver"),(0,l.kt)("p",null,"Defines the resolver that aims to resolve the response to serverless and stop its execution when the request ends"),(0,l.kt)("p",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"setResolver(resolver: ResolverContract<TEvent, TContext, TCallback, TResponse, TReturn>): Omit<this, 'setResolver'>;\n")),(0,l.kt)("h3",{id:"parameters-6"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resolver"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/api/Contracts/ResolverContract"},"ResolverContract")," ","<","TEvent, TContext, TCallback, TResponse, TReturn",">"),(0,l.kt)("td",{parentName:"tr",align:null},"The implementation of the resolver contract")))),(0,l.kt)("p",null,"Returns:"),(0,l.kt)("p",null,"Omit","<","this, 'setResolver'",">"),(0,l.kt)("h2",{id:"method-setrespondwitherrors"},"(method) setRespondWithErrors"),(0,l.kt)("p",null,"Defines the responseWithErrors, a property that indicates whether the error stack should be included in the response or not"),(0,l.kt)("p",null,"Signature:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"setRespondWithErrors(respondWithErrors: boolean): Omit<this, 'setRespondWithErrors'>;\n")),(0,l.kt)("h3",{id:"parameters-7"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"respondWithErrors"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Should include or not the errors in response")))),(0,l.kt)("p",null,"Returns:"),(0,l.kt)("p",null,"Omit","<","this, 'setRespondWithErrors'",">"))}k.isMDXComponent=!0}}]);