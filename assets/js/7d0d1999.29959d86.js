"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5759],{3905:(e,t,r)=>{r.d(t,{Zo:()=>i,kt:()=>m});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),u=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},i=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,p=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),c=u(r),m=n,k=c["".concat(p,".").concat(m)]||c[m]||d[m]||s;return r?a.createElement(k,l(l({ref:t},i),{},{components:r})):a.createElement(k,l({ref:t},i))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,l=new Array(s);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var u=2;u<s;u++)l[u]=r[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},7625:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var a=r(7462),n=(r(7294),r(3905));const s={},l=void 0,o={unversionedId:"api/Handlers/Base/RawRequest/RawRequest",id:"api/Handlers/Base/RawRequest/RawRequest",title:"RawRequest",description:"@h4ad/serverless-adapter &gt; RawRequest",source:"@site/docs/api/Handlers/Base/RawRequest/RawRequest.md",sourceDirName:"api/Handlers/Base/RawRequest",slug:"/api/Handlers/Base/RawRequest/",permalink:"/docs/api/Handlers/Base/RawRequest/",draft:!1,editUrl:"https://github.com/H4ad/serverless-adapter/tree/main/www/docs/api/Handlers/Base/RawRequest/RawRequest.md",tags:[],version:"current",frontMatter:{},sidebar:"api",previous:{title:"AzureHandlerOptions",permalink:"/docs/api/Handlers/AzureHandler/AzureHandlerOptions"},next:{title:"DefaultHandler",permalink:"/docs/api/Handlers/DefaultHandler/"}},p={},u=[{value:"(class) RawRequest",id:"class-rawrequest",level:2},{value:"(method) getRequestFromExpressRequest",id:"method-getrequestfromexpressrequest",level:2},{value:"Parameters",id:"parameters",level:3},{value:"(method) onRequestCallback",id:"method-onrequestcallback",level:2},{value:"Parameters",id:"parameters-1",level:3}],i={toc:u};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},i,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/api/Introduction"},"@h4ad/serverless-adapter")," ",">"," ",(0,n.kt)("a",{parentName:"p",href:"/docs/api/Handlers/Base/RawRequest"},"RawRequest")),(0,n.kt)("h2",{id:"class-rawrequest"},"(class) RawRequest"),(0,n.kt)("p",null,"The class that expose some methods to be used to get raw request from Express HTTP Request"),(0,n.kt)("p",null,"Signature:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"export declare abstract class RawRequest<TApp> \n")),(0,n.kt)("h2",{id:"method-getrequestfromexpressrequest"},"(method) getRequestFromExpressRequest"),(0,n.kt)("p",null,"Not sure why they think using Express instance with prebuilt middlewares was a good idea, but Firebase/GCP decides to use ",(0,n.kt)("inlineCode",{parentName:"p"},"Express")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"body-parser")," by default, so you don't get a raw request, instead, you get a modified version by Express and also with the body parsed by ",(0,n.kt)("inlineCode",{parentName:"p"},"body-parser")," . If you use NestJS or Express it's awesome, but for the rest of the frameworks it's terrible! That's why I have this method, just to try and create a raw request to be used and passed to the frameworks so they can handle the request as if they received the request from the native http module."),(0,n.kt)("p",null,"Signature:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"protected getRequestFromExpressRequest(request: IncomingMessage): ServerlessRequest;\n")),(0,n.kt)("h3",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"request"),(0,n.kt)("td",{parentName:"tr",align:null},"IncomingMessage"),(0,n.kt)("td",{parentName:"tr",align:null},"The Express request")))),(0,n.kt)("p",null,"Returns:"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/api/Network/ServerlessRequest"},"ServerlessRequest")),(0,n.kt)("h2",{id:"method-onrequestcallback"},"(method) onRequestCallback"),(0,n.kt)("p",null,"The callback to when receive some request from external source"),(0,n.kt)("p",null,"Signature:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"protected onRequestCallback(app: TApp, framework: FrameworkContract<TApp>): (req: IncomingMessage, res: ServerResponse) => void | Promise<void>;\n")),(0,n.kt)("h3",{id:"parameters-1"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"app"),(0,n.kt)("td",{parentName:"tr",align:null},"TApp"),(0,n.kt)("td",{parentName:"tr",align:null},"The instance of the app")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"framework"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/api/Contracts/FrameworkContract"},"FrameworkContract")," ","<","TApp",">"),(0,n.kt)("td",{parentName:"tr",align:null},"The framework for the app")))),(0,n.kt)("p",null,"Returns:"),(0,n.kt)("p",null,"(req: IncomingMessage, res: ServerResponse) =",">"," void ","|"," Promise","<","void",">"))}d.isMDXComponent=!0}}]);