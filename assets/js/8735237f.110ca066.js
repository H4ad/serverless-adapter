"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1418],{5733:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>t,metadata:()=>i,toc:()=>d});var o=s(4848),n=s(8453);const t={title:"CORS",description:"See more about how to deal with CORS in serverless."},a=void 0,i={id:"main/frameworks/helpers/cors",title:"CORS",description:"See more about how to deal with CORS in serverless.",source:"@site/docs/main/frameworks/helpers/cors.mdx",sourceDirName:"main/frameworks/helpers",slug:"/main/frameworks/helpers/cors",permalink:"/docs/main/frameworks/helpers/cors",draft:!1,unlisted:!1,editUrl:"https://github.com/H4ad/serverless-adapter/tree/main/www/docs/main/frameworks/helpers/cors.mdx",tags:[],version:"current",frontMatter:{title:"CORS",description:"See more about how to deal with CORS in serverless."},sidebar:"main",previous:{title:"Body Parser",permalink:"/docs/main/frameworks/helpers/body-parser"},next:{title:"Lazy",permalink:"/docs/main/frameworks/helpers/lazy"}},c={},d=[{value:"Why?",id:"why",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Usage",id:"usage",level:2}];function h(e){const r={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(r.p,{children:["This framework is a helper framework that wraps around another framework and gets some options to configure CORS in your app using the ",(0,o.jsx)(r.a,{href:"https://github.com/expressjs/cors",children:"cors"})," library behind the scenes."]}),"\n",(0,o.jsx)(r.h2,{id:"why",children:"Why?"}),"\n",(0,o.jsxs)(r.p,{children:["Why should I use this framework instead of directly using my framework/application's ",(0,o.jsx)(r.code,{children:"joe-doe-cors"})," package?"]}),"\n",(0,o.jsxs)(r.p,{children:["Using this framework, you can skip the ",(0,o.jsx)(r.code,{children:"request"})," to your framework, so it's faster to handle it directly in the library instead of leaving it\r\nto your frame."]}),"\n",(0,o.jsxs)(r.p,{children:["Also, frameworks like ",(0,o.jsx)(r.code,{children:"trpc"}),", ",(0,o.jsx)(r.code,{children:"deep\u1e31it"})," and other frameworks don't have a good way of dealing with CORS, so with ",(0,o.jsx)(r.code,{children:"CorsFramework"})," you can do the CORS\r\nworks for these frameworks."]}),"\n",(0,o.jsxs)(r.p,{children:["Finally, I added an optimization, inspired by ",(0,o.jsx)(r.a,{href:"https://github.com/primus/access-control/blob/master/index.js#L95-L115",children:"access control"}),", which returns the Forbidden error when the origin is invalid\r\nor when the method is not allowed. In other packages, like ",(0,o.jsx)(r.code,{children:"fastify/cors"}),", the ",(0,o.jsx)(r.code,{children:"cors"})," itself used by this library and ",(0,o.jsx)(r.a,{href:"https://stackoverflow.com/questions/57212248/why-is-http-request-been-processed-in-action-even-when-cors-is-not-enabled",children:"even other languages"}),",\r\nthey process the request if the origin is invalid and to me it sounds like a waste of resources, so we can just return the error to the user instead of processing the request which is sure to return the error in the user's browser."]}),"\n",(0,o.jsxs)(r.blockquote,{children:["\n",(0,o.jsxs)(r.p,{children:["If you want to disable this behaviour, set ",(0,o.jsx)(r.code,{children:"{ forbiddenOnInvalidOriginOrMethod: false }"})," in the options."]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"requirements",children:"Requirements"}),"\n",(0,o.jsx)(r.p,{children:"To be able to use, first you need to install some packages:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"npm i --save cors\n"})}),"\n",(0,o.jsx)(r.p,{children:"If you are using TypeScript:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"npm i --save-dev @types/cors\n"})}),"\n",(0,o.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(r.p,{children:["The first parameter is the instance of another framework, so if you want to use ",(0,o.jsx)(r.a,{href:"../express",children:"Express"})," for example, you can just use like this:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:"import { ServerlessAdapter } from '@h4ad/serverless-adapter';\r\nimport { CorsFramework, CorsFrameworkOptions } from '@h4ad/serverless-adapter/frameworks/cors';\r\nimport { ExpressFramework } from '@h4ad/serverless-adapter/frameworks/express';\r\n\r\nconst express = require('express');\r\n\r\nconst expressFramework = new ExpressFramework();\r\n// see docs about the options in the original package:\r\n// https://github.com/expressjs/cors\r\nconst options: CorsFrameworkOptions = { origin: '*' };\r\nconst framework = new CorsFramework(expressFramework, options);\r\n\r\nexport const handler = ServerlessAdapter.new(express)\r\n  .setFramework(framework)\r\n  // continue to set the other options here.\r\n  //.setHandler(new DefaultHandler())\r\n  //.setResolver(new PromiseResolver())\r\n  //.addAdapter(new AlbAdapter())\r\n  //.addAdapter(new SQSAdapter())\r\n  //.addAdapter(new SNSAdapter())\r\n  // after put all methods necessary, just call the build method.\r\n  .build();\n"})}),"\n",(0,o.jsx)(r.admonition,{type:"tip",children:(0,o.jsxs)(r.p,{children:["Is your application instance creation asynchronous? Look the ",(0,o.jsx)(r.a,{href:"./lazy",children:"LazyFramework"})," which helps you in asynchronous startup."]})})]})}function l(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>a,x:()=>i});var o=s(6540);const n={},t=o.createContext(n);function a(e){const r=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),o.createElement(t.Provider,{value:r},e.children)}}}]);