"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1093],{3336:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>d,contentTitle:()=>t,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=s(4848),n=s(8453);const a={title:"Body Parser",description:"See more about how to deal with content type parsing in serverless."},t=void 0,i={id:"main/frameworks/helpers/body-parser",title:"Body Parser",description:"See more about how to deal with content type parsing in serverless.",source:"@site/docs/main/frameworks/helpers/body-parser.mdx",sourceDirName:"main/frameworks/helpers",slug:"/main/frameworks/helpers/body-parser",permalink:"/docs/main/frameworks/helpers/body-parser",draft:!1,unlisted:!1,editUrl:"https://github.com/H4ad/serverless-adapter/tree/main/www/docs/main/frameworks/helpers/body-parser.mdx",tags:[],version:"current",frontMatter:{title:"Body Parser",description:"See more about how to deal with content type parsing in serverless."},sidebar:"main",previous:{title:"Helpers",permalink:"/docs/category/helpers"},next:{title:"CORS",permalink:"/docs/main/frameworks/helpers/cors"}},d={},p=[{value:"Why?",id:"why",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Usage",id:"usage",level:2},{value:"Customizing",id:"customizing",level:2}];function c(e){const r={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(r.p,{children:["This framework is a helper framework that wraps around another framework and gets some options to configure content parsing in your app using the ",(0,o.jsx)(r.a,{href:"https://github.com/expressjs/body-parser",children:"body-parser"})," library behind the scenes."]}),"\n",(0,o.jsx)(r.h2,{id:"why",children:"Why?"}),"\n",(0,o.jsxs)(r.p,{children:["Why should I use this framework instead of directly using my framework/application's ",(0,o.jsx)(r.code,{children:"joe-doe-body-parser"})," package?"]}),"\n",(0,o.jsxs)(r.p,{children:["Frameworks like ",(0,o.jsx)(r.code,{children:"trpc"}),", ",(0,o.jsx)(r.code,{children:"deep\u1e31it"})," and other frameworks don't have a good way of dealing with content parsing, so with ",(0,o.jsx)(r.code,{children:"BodyParserFramework"})," you can do the content parsing\r\nworks for these frameworks."]}),"\n",(0,o.jsx)(r.h2,{id:"requirements",children:"Requirements"}),"\n",(0,o.jsx)(r.p,{children:"To be able to use, first you need to install some packages:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"npm i --save body-parser http-errors\n"})}),"\n",(0,o.jsx)(r.p,{children:"If you are using TypeScript:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"npm i --save-dev @types/body-parser\n"})}),"\n",(0,o.jsx)(r.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(r.p,{children:["Like ",(0,o.jsx)(r.a,{href:"https://github.com/expressjs/body-parser",children:"body-parser"}),", you have four types of content that we support:"]}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"application/json"})," using ",(0,o.jsx)(r.a,{href:"/docs/api/Frameworks/BodyParserFramework/JsonBodyParserFramework",children:"JsonBodyParserFramework"}),"."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"text/plain"})," using ",(0,o.jsx)(r.a,{href:"/docs/api/Frameworks/BodyParserFramework/TextBodyParserFramework",children:"TextBodyParserFramework"}),"."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"application/octet-stream"})," using ",(0,o.jsx)(r.a,{href:"/docs/api/Frameworks/BodyParserFramework/RawBodyParserFramework",children:"RawBodyParserFramework"}),"."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"application/x-www-form-urlencoded"})," using ",(0,o.jsx)(r.a,{href:"/docs/api/Frameworks/BodyParserFramework/UrlencodedBodyParserFramework",children:"UrlencodedBodyParserFramework"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(r.blockquote,{children:["\n",(0,o.jsx)(r.p,{children:"If you have sent any other type of content using these body parsers, the body parser will skip parsing your content."}),"\n"]}),"\n",(0,o.jsxs)(r.p,{children:["The first parameter is the instance of another framework, so if you want to use ",(0,o.jsx)(r.a,{href:"../express",children:"Express"})," for example and want to parse ",(0,o.jsx)(r.code,{children:"application/json"}),", you can use like this:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:"import { ServerlessAdapter } from '@h4ad/serverless-adapter';\r\nimport { JsonBodyParserFramework, JsonBodyParserFrameworkOptions } from '@h4ad/serverless-adapter/frameworks/cors';\r\nimport { ExpressFramework } from '@h4ad/serverless-adapter/frameworks/express';\r\n\r\nconst express = require('express');\r\n\r\nconst expressFramework = new ExpressFramework();\r\n// see docs about the options in the original package:\r\n// https://github.com/expressjs/body-parser#bodyparserjsonoptions\r\nconst options: JsonBodyParserFrameworkOptions = { limit: 1024 * 1024 }; // limit body to 1mb\r\nconst framework = new JsonBodyParserFramework(expressFramework, options);\r\n\r\nexport const handler = ServerlessAdapter.new(express)\r\n  .setFramework(framework)\r\n  // continue to set the other options here.\r\n  //.setHandler(new DefaultHandler())\r\n  //.setResolver(new PromiseResolver())\r\n  //.addAdapter(new AlbAdapter())\r\n  //.addAdapter(new SQSAdapter())\r\n  //.addAdapter(new SNSAdapter())\r\n  // after put all methods necessary, just call the build method.\r\n  .build();\n"})}),"\n",(0,o.jsx)(r.p,{children:"If you want to combine with more frameworks, just add others like:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:"import { ServerlessAdapter } from '@h4ad/serverless-adapter';\r\nimport { JsonBodyParserFramework, UrlencodedBodyParserFramework, RawBodyParserFramework } from '@h4ad/serverless-adapter/frameworks/body-parser';\r\nimport { CorsFramework } from '@h4ad/serverless-adapter/frameworks/cors';\r\nimport { ExpressFramework } from '@h4ad/serverless-adapter/frameworks/express'; import {  } from './cors.framework';\r\n\r\nconst expressFramework = new ExpressFramework();\r\n\r\n// combine as much as you want\r\nconst framework = new UrlencodedBodyParserFramework(\r\n  new RawBodyParserFramework(\r\n    new JsonBodyParserFramework(\r\n      expressFramework,\r\n      { limit: 1024 * 1024 }, // options\r\n    ),\r\n    { limit: 1024 * 1024 }, // options\r\n  ),\r\n  { limit: 1024 * 1024 }, // options\r\n);\r\n\r\n// you can also combine with cors\r\nconst finalFramework = new CorsFramework(framework);\n"})}),"\n",(0,o.jsx)(r.admonition,{type:"tip",children:(0,o.jsxs)(r.p,{children:["Is your application instance creation asynchronous? Look the ",(0,o.jsx)(r.a,{href:"./lazy",children:"LazyFramework"})," which helps you in asynchronous startup."]})}),"\n",(0,o.jsx)(r.h2,{id:"customizing",children:"Customizing"}),"\n",(0,o.jsxs)(r.p,{children:["If you want to customize the error messages, like when the size limit is exceeded, you can use ",(0,o.jsx)(r.code,{children:"customErrorHandler"}),", like this:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:"import type { IncomingMessage, ServerResponse } from 'http';\r\nimport type { HttpError } from 'http-errors';\r\nimport { JsonBodyParserFramework, JsonBodyParserFrameworkOptions } from '@h4ad/serverless-adapter/frameworks/body-parser';\r\n\r\nconst options: JsonBodyParserFrameworkOptions = {\r\n  customErrorHandler: (req: IncomingMessage, response: ServerResponse, error: HttpError<any>) => {\r\n    response.setHeader('content-type', 'application/json');\r\n    response.statusCode = error.statusCode;\r\n    // always call end to return the error\r\n    response.end(JSON.stringify({\r\n      message: error.message,\r\n    }));\r\n  },\r\n};\r\nconst framework = new JsonBodyParserFramework(expressFramework, options);\n"})})]})}function l(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>t,x:()=>i});var o=s(6540);const n={},a=o.createContext(n);function t(e){const r=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:t(e.components),o.createElement(a.Provider,{value:r},e.children)}}}]);