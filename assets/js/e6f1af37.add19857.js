"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3834],{1343:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var t=r(4848),i=r(8453);const s={},a=void 0,o={id:"api/Core/isBinary/isContentTypeBinary",title:"isContentTypeBinary",description:"@h4ad/serverless-adapter &gt; isContentTypeBinary",source:"@site/docs/api/Core/isBinary/isContentTypeBinary.md",sourceDirName:"api/Core/isBinary",slug:"/api/Core/isBinary/isContentTypeBinary",permalink:"/docs/api/Core/isBinary/isContentTypeBinary",draft:!1,unlisted:!1,editUrl:"https://github.com/H4ad/serverless-adapter/tree/main/www/docs/api/Core/isBinary/isContentTypeBinary.md",tags:[],version:"current",frontMatter:{},sidebar:"api",previous:{title:"isContentEncodingBinary",permalink:"/docs/api/Core/isBinary/isContentEncodingBinary"},next:{title:"ApolloServerFramework",permalink:"/docs/api/Frameworks/ApolloServerFramework/"}},c={},d=[{value:"(function) isContentTypeBinary",id:"function-iscontenttypebinary",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Example",id:"example",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/docs/api/Introduction",children:"@h4ad/serverless-adapter"})," > ",(0,t.jsx)(n.a,{href:"/docs/api/Core/isBinary/isContentTypeBinary",children:"isContentTypeBinary"})]}),"\n",(0,t.jsx)(n.h2,{id:"function-iscontenttypebinary",children:"(function) isContentTypeBinary"}),"\n",(0,t.jsx)(n.p,{children:"The function that determines by the content type whether the response should be treated as binary"}),"\n",(0,t.jsx)(n.p,{children:"Signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export declare function isContentTypeBinary(headers: BothValueHeaders, binaryContentTypes: string[]): boolean;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)("table",{children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:(0,t.jsx)(n.p,{children:"Parameter"})}),(0,t.jsx)("th",{children:(0,t.jsx)(n.p,{children:"Type"})}),(0,t.jsx)("th",{children:(0,t.jsx)(n.p,{children:"Description"})})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"headers"})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/docs/api/Types/BothValueHeaders",children:"BothValueHeaders"})})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"The headers of the response"})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"binaryContentTypes"})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"string[]"})}),(0,t.jsx)("td",{children:(0,t.jsx)(n.p,{children:"The list of content types that will be treated as binary"})})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Returns:"}),"\n",(0,t.jsx)(n.p,{children:"boolean"}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const headers = \\{ 'content-type': 'image/png' };\r\nconst isBinary = isContentTypeBinary(headers, new Map([['image/png', true]]));\r\nconsole.log(isBinary);\r\n// true\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(6540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);