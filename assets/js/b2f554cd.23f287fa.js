"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"dual-package-publish","metadata":{"permalink":"/blog/dual-package-publish","editUrl":"https://github.com/H4ad/serverless-adapter/tree/main/www/blog/2023-12-25-dual-package-publish.mdx","source":"@site/blog/2023-12-25-dual-package-publish.mdx","title":"Support for Dual Package Publish","description":"Two paths inside a forest!","date":"2023-12-25T00:00:00.000Z","formattedDate":"December 25, 2023","tags":[{"label":"serverless-adapter","permalink":"/blog/tags/serverless-adapter"},{"label":"cjs","permalink":"/blog/tags/cjs"},{"label":"esm","permalink":"/blog/tags/esm"},{"label":"npm","permalink":"/blog/tags/npm"},{"label":"package","permalink":"/blog/tags/package"},{"label":"publish","permalink":"/blog/tags/publish"}],"readingTime":7.445,"hasTruncateMarker":false,"authors":[{"name":"Vin\xedcius Louren\xe7o","title":"Maintainer of Serverless Adapter","url":"https://github.com/h4ad","imageURL":"https://github.com/h4ad.png","key":"h4ad"}],"frontMatter":{"slug":"dual-package-publish","title":"Support for Dual Package Publish","authors":["h4ad"],"tags":["serverless-adapter","cjs","esm","npm","package","publish"],"image":"https://images.unsplash.com/photo-1429743305873-d4065c15f93e"},"unlisted":false,"nextItem":{"title":"AWS Lambda Response Streaming","permalink":"/blog/aws-lambda-response-streaming"}},"content":"import BrowserWindow from \'@site/src/components/BrowserWindow\';\\n\\n![Two paths inside a forest!](https://images.unsplash.com/photo-1429743305873-d4065c15f93e)\\n> Image by [Jens Lelie](https://unsplash.com/@madebyjens) on [Unsplash](https://unsplash.com)\\n\\nThis feature was initially asked by [ClementCornut](https://github.com/ClementCornut) on issue [#127](https://github.com/H4ad/serverless-adapter/issues/127).\\n\\nInitially I was a little unsure whether to publish `esm` and `cjs`, but then I started to like the idea of exporting\\nmy packages as `@h4ad/serverless-adapter/adapters/aws`.\\n\\nYou can use it by installing the new version:\\n\\n```bash\\nnpm i @h4ad/serverless-adapter@4.0.0\\n```\\n\\nIn the previous version, since I only export to `commonjs`, you need to import the files as `/lib/adapters/aws`, which is not bad, but not exactly good.\\nThis was necessary because I can\'t export all files in the default `export` as this will lead you to install all frameworks supported by this library.\\n\\nBut ok, I had some problems while adding support for dual-package publishing which I want to share with you only,\\nand especially for my future version if you want to add support for dual-package publishing in your modules.\\n\\n## Vite\\n\\nI already use `vitest` test my package and to build the previous versions,\\nit works great and is specially fast to run the tests (5.82s to run 456 tests across 52 files).\\n\\nBut the configuration to build was a little bit nightmare:\\n\\n```ts title=\\"vite.config.ts\\"\\n// some initial configuration lines...\\n  ...(!isTest && {\\n    esbuild: {\\n      format: \'cjs\',\\n      platform: \'node\',\\n      target: \'node18\',\\n      sourcemap: \'external\',\\n      minifyIdentifiers: false,\\n    },\\n    build: {\\n      outDir: \'lib\',\\n      emptyOutDir: true,\\n      sourcemap: true,\\n      lib: {\\n        entry: path.resolve(__dirname, \'src/index.ts\'),\\n        formats: [\'cjs\'],\\n      },\\n      rollupOptions: {\\n        external: [\'yeoman-generator\'],\\n        input: glob.sync(path.resolve(__dirname, \'src/**/*.ts\')),\\n        output: {\\n          preserveModules: true,\\n          entryFileNames: entry => {\\n            const { name } = entry;\\n\\n            const fileName = `${name}.js`;\\n\\n            return fileName;\\n          },\\n        },\\n      },\\n    },\\n  }),\\n```\\n\\nAll of this configuration was necessary as I need to build my package to match exactly the same structure as `src`,\\nwhich was needed for users to import as `/lib/adapters/aws`.\\n\\nOn the first attempt, I just tried to extend this configuration, but I spent a few hours and managed to generate\\na good package output, but it was missing some details that were very painful to bear, such as correctly emitting `d.cts`.\\n\\nIf you want to see how it turned out, if you want to try doing this using `vite` directly,\\n[here is vite.config.ts](https://github.com/H4ad/serverless-adapter/blob/f642739334687b0a22312074a6e225e9f8ac8124/vite.config.ts).\\n\\nBut then I started to give up and [tweeted about it](https://twitter.com/vinii_joga10/status/1738954683853451760).\\n\\n## Suggestions from Twitter\\n\\nI got some incredible helpful messages on twitter and I will cover those suggestions that I applied to be able to finally support dual package publish.\\n\\n### Re-exporting on mjs\\n\\nThis was a suggestion from [Matteo Collina](https://twitter.com/matteocollina), he also sent me the package [snap](https://github.com/mcollina/snap) which does this re-export,\\nwhich I also saw being used in [Orama](https://github.com/oramasearch/orama/blob/main/packages/orama/src/cjs/index.cts), is basically doing this:\\n\\n<BrowserWindow url=\\"https://nodejs.org/api/packages.html#approach-2-isolate-state\\">\\n  Your state:\\n\\n  ```js title=\\"./node_modules/pkg/state.cjs\\"\\n  import Date from \'date\';\\n  const someDate = new Date();\\n  ```\\n\\n  Define/export on `cjs`.\\n\\n  ```js title=\\"./node_modules/pkg/index.cjs\\"\\n  const state = require(\'./state.cjs\');\\n  module.exports.state = state;\\n  ```\\n\\n  Re-export on `mjs`.\\n\\n  ```js title=\\"./node_modules/pkg/index.mjs\\"\\n  import state from \'./state.cjs\';\\n  export {\\n  state,\\n};\\n  ```\\n</BrowserWindow>\\n\\nThis way, I solve the problem of state isolation, but I will need:\\n\\n- or manually export all these files\\n- or use a tool to automate this process\\n\\nBoth ways will be a bit painful to maintain, so I didn\'t go that route.\\n\\nThis approach can be fine if your library maintains state and the codebase is pure javascript.\\n\\n### tsup\\n\\nInstead of trying to go through this configuration hell in `vite`, [Michele Riva](https://twitter.com/MicheleRivaCode)\\nsuggested [tsup](https://tsup.egoist.dev/) which is incredibly easy to use.\\n\\nI spent less than 10 minutes to generate almost the same output as the previous configuration with `vite`,\\nbut this time the output was correct, with `d.cts` files being generated.\\n\\nMy configuration file now looks like this:\\n\\n```ts title=\\"tsup.config.ts\\"\\nexport default defineConfig({\\n  outDir: \'./lib\',\\n  clean: true,\\n  dts: true,\\n  format: [\'esm\', \'cjs\'],\\n  // the libEntries is basically all the entries I need to export,\\n  // like: adapters/aws, frameworks/fastify, etc...\\n  entry: [\'src/index.ts\', ...libEntries],\\n  sourcemap: true,\\n  skipNodeModulesBundle: true,\\n  minify: true,\\n  target: \'es2022\',\\n  tsconfig: \'./tsconfig.build.json\',\\n  keepNames: true,\\n  bundle: true,\\n});\\n```\\n\\nSince I have a lot of things to export, I also automate the configuration of `exports` in `package.json` with:\\n\\n```ts title=\\"tsup.config.ts\\"\\n// I do the same for adapters, frameworks and handlers\\nconst resolvers = [\'aws-context\', \'callback\', \'dummy\', \'promise\'];\\n\\nconst libEntries = [\\n  ...resolvers.map(resolver => `src/resolvers/${resolver}/index.ts`),\\n];\\n\\nconst createExport = (filePath: string) => ({\\n  import: {\\n    types: `./lib/${filePath}.d.ts`,\\n    default: `./lib/${filePath}.js`,\\n  },\\n  require: {\\n    types: `./lib/${filePath}.d.cts`,\\n    default: `./lib/${filePath}.cjs`,\\n  },\\n});\\n\\nconst createExportReducer =\\n  (initialPath: string) => (acc: object, name: string) => {\\n    acc[`./${initialPath}/${name}`] = createExport(\\n      `${initialPath}/${name}/index`,\\n    );\\n\\n    return acc;\\n  };\\n\\nconst packageExports = {\\n  \'.\': createExport(\'index\'),\\n  ...resolvers.reduce(createExportReducer(\'resolvers\'), {}),\\n  // and I also do the same for adapters, frameworks and handlers.\\n};\\n\\n// this command does the magic to update my package.json\\nexecSync(`npm pkg set exports=\'${JSON.stringify(packageExports)}\' --json`);\\n```\\n\\nThis works incredible and also keep my `package.json` updated.\\n\\n### publint\\n\\nThe [publint](https://publint.dev/) is a tool that I learned on [ESM Modernization Lessons](https://blog.isquaredsoftware.com/2023/08/esm-modernization-lessons/#early-attempts) inside `Early Attempts`,\\nthis article was a suggestion by [Luca Micieli](https://twitter.com/LucaRams23).\\n\\nWith this tool, I detect several problems with the `exports` configuration and this will make your life a lot easier.\\n\\nBut this tool has a problem that they didn\'t catch, and this problem was pointed out by [Michele Riva](https://twitter.com/MicheleRivaCode), instead:\\n\\n```json title=\\"package.json\\"\\n\\"exports\\": {\\n  \\"resolvers/promise\\": {\\n```\\n\\nI should export it with the prefix `./`:\\n\\n```json title=\\"package.json\\"\\n\\"exports\\": {\\n  \\"./resolvers/promise\\": {\\n```\\n\\nThis small detail can make your configuration fail.\\n\\n### verdaccio\\n\\nThe [verdaccio](https://verdaccio.org/) was suggested by [Abhijeet Prasad](https://twitter.com/imabhiprasad), with this tool you can have your private registry that you can use to test,\\nAbhijeet use this tool on [Sentry](https://sentry.io/) SDKs to do e2e tests.\\n\\nWith this tool, I was able to make sure the package was working correctly with the new dual package publish.\\n\\n### Wrong `moduleResolution`\\n\\nIt took me a while to realize, but while testing the changes in a sample project, the imports still failed because TypeScript couldn\'t find the files.\\n\\nSo I remember the suggestion from [sami](https://twitter.com/samijaber_) who gave me some examples of projects he uses\\nin [BuilderIO/hidration-overlay](https://github.com/BuilderIO/hydration-overlay/tree/main/tests),\\nand I understand the difference between `moduleResolution`, in my project it was configured for `node`,\\nin his project it was configured for `bundler`.\\n\\nWhen I changed this setting, all imports started working and imports using `/lib/adapters/aws` started failing.\\n\\nIf you\'re like me and have no idea what this setting is about, the documentation says:\\n\\n<BrowserWindow url=\\"https://www.typescriptlang.org/tsconfig#moduleResolution\\">\\n  Specify the module resolution strategy:\\n\\n  \'node16\' or \'nodenext\' for modern versions of Node.js. Node.js v12 and later supports both ECMAScript imports and\\n  CommonJS require, which resolve using different algorithms. These moduleResolution values, when combined with the\\n  corresponding module values, picks the right algorithm for each resolution based on whether Node.js will see an import\\n  or require in the output JavaScript code.\\n\\n  \'node10\' (previously called \'node\') for Node.js versions older than v10, which only support CommonJS require. You\\n  probably won\u2019t need to use node10 in modern code.\\n\\n  \'bundler\' for use with bundlers. Like node16 and nodenext, this mode supports package.json \\"imports\\" and \\"exports\\",\\n  but unlike the Node.js resolution modes, bundler never requires file extensions on relative paths in imports.\\n</BrowserWindow>\\n\\nMake sense why it was not working at all, `node` was not built to support `exports`, and only `nodenext` and `bundler` should work correctly.\\n\\n## Doubling the package size\\n\\nSomething I saw that made me a little worried was the size of this package, since I need to export the code, types and source maps twice, the package\\nwent from `~600Kb` to `~1.5Mb`.\\n\\nI enabled minification to try to reduce the amount of code shipped, but if you use this library and don\'t have any kind of minification/bundling\\nduring your build, I highly recommend you look into these libraries to help you with the size of your zip file being uploaded:\\n\\n- [@h4ad/node-modules-packer](https://github.com/H4ad/node-modules-packer)\\n- [ncc](https://github.com/vercel/ncc)\\n- [zip-it-and-ship-it](https://github.com/netlify/zip-it-and-ship-it)\\n\\n## Conclusions\\n\\nThe `esm` packages was a nightmare to support some time ago but the ecosystem is starting solving problems with new tools to bundle your project\\ninstead of having to fight with your own configuration files.\\n\\nThe `cjs` is a no-brain solution, almost no configuration and it works great but maybe is not ideal for your consumers/clients, some of them can have issues\\nlike [ClementCornut](https://github.com/ClementCornut) that needed to import the files with the full path `import awsPkg from \\"@h4ad/serverless-adapter/lib/adapters/aws/index.js\\";`.\\n\\nWhen I started adding this feature, I had no knowledge of how to publish double packages, I basically go-horse in the early hours\\nof my implementation and then I started learning more about how it works and how to properly configure the package.\\n\\nThis makes me realize that dual-package publishing isn\'t the nightmare I initially thought, I just didn\'t learn from the\\nprevious mistakes other people made and I should have read more articles about it before I started implementing it.\\n\\nMy sincere thanks to:\\n\\n- [Abhijeet Prasad](https://twitter.com/imabhiprasad)\\n- [Luca Micieli](https://twitter.com/LucaRams23)\\n- [Matteo Collina](https://twitter.com/matteocollina)\\n- [Michele Riva](https://twitter.com/MicheleRivaCode)\\n- [sami](https://twitter.com/samijaber_)\\n\\nWithout you, it will probably take me a lot longer to be able to convince myself to go ahead and try again to add support\\nfor dual-package publish after the first failures."},{"id":"aws-lambda-response-streaming","metadata":{"permalink":"/blog/aws-lambda-response-streaming","editUrl":"https://github.com/H4ad/serverless-adapter/tree/main/www/blog/2023-04-28-aws-lambda-response-streaming.mdx","source":"@site/blog/2023-04-28-aws-lambda-response-streaming.mdx","title":"AWS Lambda Response Streaming","description":"A beautiful stream!","date":"2023-04-28T00:00:00.000Z","formattedDate":"April 28, 2023","tags":[{"label":"serverless-adapter","permalink":"/blog/tags/serverless-adapter"},{"label":"aws","permalink":"/blog/tags/aws"},{"label":"aws-lambda","permalink":"/blog/tags/aws-lambda"},{"label":"function-url","permalink":"/blog/tags/function-url"}],"readingTime":2.79,"hasTruncateMarker":false,"authors":[{"name":"Vin\xedcius Louren\xe7o","title":"Maintainer of Serverless Adapter","url":"https://github.com/h4ad","imageURL":"https://github.com/h4ad.png","key":"h4ad"}],"frontMatter":{"slug":"aws-lambda-response-streaming","title":"AWS Lambda Response Streaming","authors":["h4ad"],"tags":["serverless-adapter","aws","aws-lambda","function-url"],"image":"https://images.unsplash.com/photo-1527489377706-5bf97e608852"},"unlisted":false,"prevItem":{"title":"Support for Dual Package Publish","permalink":"/blog/dual-package-publish"},"nextItem":{"title":"Updates and Releases","permalink":"/blog/updates-and-releases"}},"content":"![A beautiful stream!](https://images.unsplash.com/photo-1527489377706-5bf97e608852)\\n> Image by [Hendrik Cornelissen](https://unsplash.com/@the_bracketeer) on [Unsplash](https://unsplash.com)\\n\\nIt\'s been a long time since I wrote a post here, but I\'m happy to share this new announcement.\\n\\n## First, are you new to this library?\\n\\n![First time?](first-time-meme-first-time.gif)\\n\\nLet me introduce the library first, I named [Serverless Adapter](/docs/main/intro) because my goal is connect any serverless environment to any NodeJS framework.\\n\\nSo you could just plug your [framework](/docs/main/architecture#framework), use the correct [handler](/docs/main/architecture#handler) for your serverless environment,\\nchoose the [adapters](/docs/main/architecture#adapter) and then you can deploy your application!\\n\\n### What does this library support?\\n\\nCurrently, we support [8 NodeJS frameworks](/docs/category/frameworks): [Express](/docs/main/frameworks/express), [Fastify](/docs/main/frameworks/fastify), [tRPC](/docs/main/frameworks/trpc), [Apollo Server](/docs/main/frameworks/apollo-server), [NestJS](/docs/main/frameworks/nestjs), [Deepkit](/docs/main/frameworks/deepkit), [Koa](/docs/main/frameworks/koa) and [Hapi](/docs/main/frameworks/Hapi).\\n\\nWe also support [6 serverless environments](/docs/category/handlers): [AWS](/docs/main/handlers/aws), [Azure](/docs/main/handlers/azure), [Google Cloud](/docs/main/handlers/gcp), [Digital Ocean](/docs/main/handlers/digital-ocean), [Firebase](/docs/main/handlers/firebase) and [Huawei](/docs/main/handlers/huawei).\\n\\nTalking about AWS, we support [10 different services](/docs/category/aws) like API Gateway [V1](/docs/main/adapters/aws/api-gateway-v1) and [V2](/docs/main/adapters/aws/api-gateway-v2), [SQS](/docs/main/adapters/aws/sqs), [SNS](/docs/main/adapters/aws/sns), etc... and you can combine them to use the same codebase and lambda to handle them all.\\n\\n:::tip\\nTo learn understand the power of this composability, check this article I wrote about how I went [From a million invocations to a thousand with correct caching](https://viniciusl.com.br/posts/2022/12/08-from-million-invocations-to-thousand-with-correct-caching/).\\n:::\\n\\nBut okay, enough self-marketing, let\'s get to the main point of this article.\\n\\n## AWS Lambda Response Streaming\\n\\nToday I\'m rolling out support for [AWS Lambda Streaming Response](https://aws.amazon.com/blogs/compute/introducing-aws-lambda-response-streaming/) using [AwsStreamHandler](/docs/main/handlers/aws#aws-lambda-response-streaming).\\n\\nIf you already use this library, just change [DefaultHandler](/docs/main/handlers/aws#usage) to [AwsStreamHandler](/docs/main/handlers/aws#aws-lambda-response-streaming), and make sure you\'re using [DummyResolver](/docs/api/Resolvers/DummyResolver) and [ApiGatewayV2Adapter](/docs/main/adapters/aws/api-gateway-v2):\\n\\n```ts title=\\"index.ts\\"\\nimport { ServerlessAdapter } from \'@h4ad/serverless-adapter\';\\nimport { AwsStreamHandler } from \'@h4ad/serverless-adapter/handlers/aws\';\\nimport { DummyResolver } from \'@h4ad/serverless-adapter/resolvers/dummy\';\\nimport { ApiGatewayV2Adapter } from \'@h4ad/serverless-adapter/adapters/aws\';\\nimport app from \'./app\';\\n\\nexport const handler = ServerlessAdapter.new(app)\\n// .setHandler(new DefaultHandler())\\n   .setHandler(new AwsStreamHandler())\\n   .setResolver(new DummyResolver())\\n   .setAdapter(new ApiGatewayV2Adapter())\\n   // more options...\\n   //.setFramework(new ExpressFramework())\\n   .build();\\n```\\n\\n> Despite its name, `ApiGatewayV2Adapter` can be used to support API Gateway V2 and function URLs.\\n\\n:::caution\\nResponse streaming currently is only available for Function URLs.\\n:::\\n\\nThat\'s it :) Now you can use Function URLs and stream your content to the world!\\n\\n:::information\\nDon\'t forget to enable the feature in your AWS Lambda function by changing `BUFFERED` TO `RESPONSE_STREAM.`\\n:::\\n\\n### I NEED CODE!!!\\n\\nWell, if you\'re the type of person who, like me, needs to see the code working, here\'s a repository with several example projects using this library:\\n[serverless-adapter-examples](https://github.com/H4ad/serverless-adapter-examples).\\n\\n## Beyond HTTP Requests\\n\\nFurthermore, not only can you receive HTTP requests using `Function URLs`, but you can combine your `SQS` queue and use the same codebase to process everything.\\n\\nI haven\'t spent a lot of time testing it, but so far, any AWS service that supports this library can be hooked up to your Lambda function with `RESPONSE_STREAM` enabled.\\n\\nThe only thing you need to know is: the answer didn\'t work as expected, I couldn\'t get the [SQS Partial Response](/docs/main/adapters/aws/sqs#batch-item-failures) to work for example .\\n\\nBut you can give it a try anyway, share your results with me on [twitter](https://twitter.com/vinii_joga10) and I\'ll be happy to help if I can.\\n\\n## Conclusion\\n\\nWell, I don\'t have much to say, but I hope you enjoy this new feature and use it to build amazing things.\\n\\nI\'ve spent the last 3 weeks trying to figure out how to make this work and I\'m happy with the result.\\n\\nIf you\'re curious enough to learn more about how I implement it, you can see [this PR](https://github.com/H4ad/serverless-adapter/pull/90) with all my struggles and thoughts over the weeks."},{"id":"updates-and-releases","metadata":{"permalink":"/blog/updates-and-releases","editUrl":"https://github.com/H4ad/serverless-adapter/tree/main/www/blog/2022-07-17-updates-and-releases.mdx","source":"@site/blog/2022-07-17-updates-and-releases.mdx","title":"Updates and Releases","description":"To the moon!","date":"2022-07-17T00:00:00.000Z","formattedDate":"July 17, 2022","tags":[{"label":"serverless-adapter","permalink":"/blog/tags/serverless-adapter"},{"label":"trpc","permalink":"/blog/tags/trpc"},{"label":"azure","permalink":"/blog/tags/azure"},{"label":"firebase","permalink":"/blog/tags/firebase"}],"readingTime":1.83,"hasTruncateMarker":false,"authors":[{"name":"Vin\xedcius Louren\xe7o","title":"Maintainer of Serverless Adapter","url":"https://github.com/h4ad","imageURL":"https://github.com/h4ad.png","key":"h4ad"}],"frontMatter":{"slug":"updates-and-releases","title":"Updates and Releases","authors":["h4ad"],"tags":["serverless-adapter","trpc","azure","firebase"],"image":"https://images.unsplash.com/photo-1636819488524-1f019c4e1c44"},"unlisted":false,"prevItem":{"title":"AWS Lambda Response Streaming","permalink":"/blog/aws-lambda-response-streaming"},"nextItem":{"title":"The Beginning","permalink":"/blog/the-beginning"}},"content":"import BrowserWindow from \'@site/src/components/BrowserWindow\';\\n\\n![To the moon!](https://images.unsplash.com/photo-1636819488524-1f019c4e1c44)\\n\\nNow we have more Handlers, Frameworks and Adapters, let\'s see what\'s new.\\n\\n> From [v2.3.2](https://github.com/H4ad/serverless-adapter/tree/v2.3.2) to [v2.6.0](https://github.com/H4ad/serverless-adapter/tree/v2.6.0),\\ncompare the changes [here](https://github.com/H4ad/serverless-adapter/compare/v2.3.2...v2.6.0).\\n\\n## Changes\\n\\n42 commits, 6905 lines added, 601 lines deleted, that\'s the size of the changes since [The Beginning](/blog/the-beginning).\\n\\nI\'m very proud of how things are going, I learned a lot by studying to implement these new things.\\n\\nBut, let\'s learn what\'s new in all these releases.\\n\\n## Azure and Firebase\\n\\nYou can now use this library to deploy your apps to [Azure Functions](https://docs.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-node)\\nand [Firebase Functions](https://firebase.google.com/docs/functions/http-events).\\n\\nMore specifically, you can integrate with Http Trigger V4 on Azure and Http Events on Firebase.\\n\\nThese integrations are just to open the door of possibilities, in the future I want to add support for more triggers in these clouds.\\n\\nCheck out the [Azure](/docs/main/handlers/azure) and [Firebase](/docs/main/handlers/firebase) docs for how to integrate.\\n\\nI also added examples for the cloud in the [serverless-adapter-examples](https://github.com/H4ad/serverless-adapter-examples) repository.\\n\\n## tRPC\\n\\n<BrowserWindow url=\\"https://trpc.io/docs/\\">\\n  tRPC allows you to easily build & consume fully typesafe APIs, without schemas or code generation.\\n</BrowserWindow>\\n\\ntRPC is a framework that brings a new way of thinking about APIs, instead of REST or GraphQL, you can build typesafe APIs and easily\\ncan integrate with the client, seems to be very promising.\\n\\nSo now you can deploy applications developed with tRPC to any cloud that this library supports, have a look at [docs](/docs/main/frameworks/trpc)\\nto learn more about how to use it.\\n\\n## That\'s all folks!\\n\\nI have two more weeks to work in this library without worrying because I\'m on vacation at the university,\\nso probably my next efforts will be to bring more articles to this blog to show the full power of this library.\\n\\nGiving some spoilers for those of you that make it this far, I\'ll start by showing you the benefits of using AWS Lambda integrated with\\nAPI Gateway and SQS, I used it in a project of my company and I managed to reduce a lot of stress on the database and now\\nwe are able to process 500k votes in minutes without spending 15% CPU using a PostgreSQL database on a t2.micro instance.\\n\\nThat\'s all for today, thank you!"},{"id":"the-beginning","metadata":{"permalink":"/blog/the-beginning","editUrl":"https://github.com/H4ad/serverless-adapter/tree/main/www/blog/2022-06-17-the-beginning.mdx","source":"@site/blog/2022-06-17-the-beginning.mdx","title":"The Beginning","description":"Hello, welcome to my new library to help you integrate your API with the serverless world.","date":"2022-06-17T00:00:00.000Z","formattedDate":"June 17, 2022","tags":[{"label":"serverless-adapter","permalink":"/blog/tags/serverless-adapter"}],"readingTime":1.89,"hasTruncateMarker":false,"authors":[{"name":"Vin\xedcius Louren\xe7o","title":"Maintainer of Serverless Adapter","url":"https://github.com/h4ad","imageURL":"https://github.com/h4ad.png","key":"h4ad"}],"frontMatter":{"slug":"the-beginning","title":"The Beginning","authors":["h4ad"],"tags":["serverless-adapter"]},"unlisted":false,"prevItem":{"title":"Updates and Releases","permalink":"/blog/updates-and-releases"}},"content":"Hello, welcome to my new library to help you integrate your API with the serverless world.\\n\\n## The development\\n\\nIt took me almost 5 months to build this library, refactoring was easy and testing was challenging, but documenting this library was the hardest part.\\n\\nIt took me almost 2 weeks to refactor [@vendia/serverless-express](https://github.com/vendia/serverless-express),\\nabout 1 and a half month to create tests with 99% coverage and the rest of the time I spent creating documentation for this library.\\n\\nI currently added support for:\\n\\n- AWS\\n  - [AWS Load Balancer](https://docs.aws.amazon.com/lambda/latest/dg/services-alb.html) by using ([AlbAdapter](/docs/main/adapters/aws/alb))\\n  - [AWS Api Gateway V1](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html) by using ([ApiGatewayV1Adapter](/docs/main/adapters/aws/api-gateway-v1))\\n  - [AWS Api Gateway V2](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html) by using ([ApiGatewayV2Adapter](/docs/main/adapters/aws/api-gateway-v2))\\n  - [AWS DynamoDB](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html) by using ([DynamoDBAdapter](/docs/main/adapters/aws/dynamodb))\\n  - [AWS Event Bridge / CloudWatch Events](https://docs.aws.amazon.com/lambda/latest/dg/services-cloudwatchevents.html) by using ([EventBridgeAdapter](/docs/main/adapters/aws/event-bridge))\\n  - [AWS Lambda Edge](https://docs.aws.amazon.com/lambda/latest/dg/lambda-edge.html) by using ([LambdaEdgeAdapter](/docs/main/adapters/aws/lambda-edge))\\n  - [AWS SNS](https://docs.aws.amazon.com/lambda/latest/dg/with-sns.html) by using ([SNSAdapter](/docs/main/adapters/aws/sns))\\n  - [AWS SQS](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html) by using ([SQSAdapter](/docs/main/adapters/aws/sqs))\\n- Huawei\\n  - [Http Function](https://support.huaweicloud.com/intl/en-us/usermanual-functiongraph/functiongraph_01_1442.html): Look [this section](/docs/main/handlers/huawei#http-function).\\n  - [Event Function](https://support.huaweicloud.com/intl/en-us/usermanual-functiongraph/functiongraph_01_1441.html): Look [this section](/docs/main/handlers/huawei#event-function).\\n    - [Api Gateway](https://support.huaweicloud.com/intl/en-us/devg-functiongraph/functiongraph_02_0102.html#functiongraph_02_0102__li5178638110137) by using ([HuaweiApiGatewayAdapter](/docs/main/adapters/huawei/huawei-api-gateway)).\\n\\nBut it\'s just the beginning, I\'m going to build more adapters to integrate with as much of the cloud as possible, just to be able to deploy my APIs on any cloud.\\n\\n## About me\\n\\nI am a student at [Facens](https://facens.br/) university and I work for [Liga](https://liga.facens.br/), which is a sector within Facens that develops applications, websites, games and much more fun stuff.\\n\\nI currently work on this library only in my spare time and I need to balance my Final Theses and my overtime projects so it was very challenging but I am happy with the end result of this library.\\n\\n## Inspiration\\n\\nThis library was originally created to help my company reduce costs with AWS SQS, but it has since turned into something I can spend my time developing and learning English because I\'m not a native speaker (as typing problems might suggest) writing all the documentation in English.\\n## Credits\\n\\nI need to thank [@vendia](https://vendia.net/) for developing [@vendia/serverless-express](https://github.com/vendia/serverless-express), all logic and code I finished to refactor from the code I read on serverless-express.\\nI also have many thanks to [Chaguri](https://github.com/guichaguri), [Liga](https://liga.facens.br/) and many other people who gave me time and insights to create this library.\\n\\n## You can use it right now!\\n\\nSee the [Introduction](/docs/main/intro) section to know more about the library."}]}')}}]);