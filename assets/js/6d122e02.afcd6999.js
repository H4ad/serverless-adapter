"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1505],{4928:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=t(4848),o=t(8453);const a={title:"Introduction",position:1},s=void 0,i={id:"main/advanced/adapters/introduction",title:"Introduction",description:"As we see in the Architecture section, adapters are responsible for handling the received event,",source:"@site/docs/main/advanced/adapters/introduction.mdx",sourceDirName:"main/advanced/adapters",slug:"/main/advanced/adapters/introduction",permalink:"/docs/main/advanced/adapters/introduction",draft:!1,unlisted:!1,editUrl:"https://github.com/H4ad/serverless-adapter/tree/main/www/docs/main/advanced/adapters/introduction.mdx",tags:[],version:"current",frontMatter:{title:"Introduction",position:1},sidebar:"main",previous:{title:"Adapters",permalink:"/docs/category/adapters-1"},next:{title:"Creating an Adapter",permalink:"/docs/main/advanced/adapters/creating-an-adapter"}},d={},c=[{value:"getAdapterName",id:"getadaptername",level:2},{value:"canHandle",id:"canhandle",level:2},{value:"getRequest",id:"getrequest",level:2},{value:"getResponse",id:"getresponse",level:2},{value:"onErrorWhileForwarding",id:"onerrorwhileforwarding",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["As we see in the ",(0,r.jsx)(n.a,{href:"../../architecture",children:"Architecture"})," section, adapters are responsible for handling the received event,\r\ntransforming the request in a way that your application can understand and then transforming the response in a way your cloud can understand."]}),"\n",(0,r.jsx)(n.p,{children:"The interface that represents an adapter is:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export interface AdapterContract<\r\n  TEvent,\r\n  TContext,\r\n  TResponse\r\n> {\r\n  getAdapterName(): string;\r\n  canHandle(\r\n    event: unknown,\r\n    context: TContext,\r\n    log: ILogger\r\n  ): boolean;\r\n  getRequest(\r\n    event: TEvent,\r\n    context: TContext,\r\n    log: ILogger\r\n  ): AdapterRequest;\r\n  getResponse(props: GetResponseAdapterProps<TEvent>): TResponse;\r\n  onErrorWhileForwarding(props: OnErrorProps<TEvent, TResponse>): void;\r\n}\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["You can see in more details ",(0,r.jsx)(n.a,{href:"../../../api/Contracts/AdapterContract",children:"in the API section"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"getadaptername",children:"getAdapterName"}),"\n",(0,r.jsx)(n.p,{children:"This method just return the name of the Adapter, used by the library to log which adapter was resolved."}),"\n",(0,r.jsx)(n.h2,{id:"canhandle",children:"canHandle"}),"\n",(0,r.jsx)(n.p,{children:"In this method, you should implement the logic to detect if the event sent by the serverless environment should be handle by this adapter."}),"\n",(0,r.jsx)(n.p,{children:"You must be very confident when you implement this method to not get conflict with another adapter."}),"\n",(0,r.jsx)(n.h2,{id:"getrequest",children:"getRequest"}),"\n",(0,r.jsx)(n.p,{children:"In this method, you should implement the logic to transform your event in an interface that the library could handle and forward to any framework."}),"\n",(0,r.jsx)(n.p,{children:"So, you can use the constructor of your adapter to customize the options when create the request, or, just get the event info and then transform into a request."}),"\n",(0,r.jsx)(n.p,{children:"When I say that we create a request, I literally mean that I'm going to create a request for the framework, something like:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"SQS: create a POST request to /sqs"}),"\n",(0,r.jsx)(n.li,{children:"SNS: create a POST request to /sns"}),"\n",(0,r.jsx)(n.li,{children:"and so on."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"getresponse",children:"getResponse"}),"\n",(0,r.jsx)(n.p,{children:"In this method, you should map the response of the framework to a payload that serverless environment can handle."}),"\n",(0,r.jsx)(n.p,{children:"The response is built based on what your framework returns in the request, something like:"}),"\n",(0,r.jsxs)(n.p,{children:["If you return a json response based on the ",(0,r.jsx)(n.code,{children:"{ success: true }"})," object, the response will contain the headers from that response and\r\nin the body will have the object you sent in text form and then you can map this body to whatever your event source needs as a response."]}),"\n",(0,r.jsx)(n.h2,{id:"onerrorwhileforwarding",children:"onErrorWhileForwarding"}),"\n",(0,r.jsx)(n.p,{children:"When an error occurs while forwarding the request to the framework, this method is called,\r\ntherefore, you must implement what will be done when an error during the forwarding occurs."})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var r=t(6540);const o={},a=r.createContext(o);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);