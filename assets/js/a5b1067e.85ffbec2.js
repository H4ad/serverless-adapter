"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3363],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},m=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),u=c(r),d=a,f=u["".concat(i,".").concat(d)]||u[d]||l[d]||o;return r?n.createElement(f,s(s({ref:t},m),{},{components:r})):n.createElement(f,s({ref:t},m))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=u;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:a,s[1]=p;for(var c=2;c<o;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4677:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={title:"tRPC",description:"See more about how to integrate with tRPC."},s=void 0,p={unversionedId:"main/frameworks/trpc",id:"main/frameworks/trpc",title:"tRPC",description:"See more about how to integrate with tRPC.",source:"@site/docs/main/frameworks/trpc.mdx",sourceDirName:"main/frameworks",slug:"/main/frameworks/trpc",permalink:"/docs/main/frameworks/trpc",draft:!1,editUrl:"https://github.com/H4ad/serverless-adapter/tree/main/www/docs/main/frameworks/trpc.mdx",tags:[],version:"current",frontMatter:{title:"tRPC",description:"See more about how to integrate with tRPC."},sidebar:"main",previous:{title:"NestJS",permalink:"/docs/main/frameworks/nestjs"}},i={},c=[{value:"Integrating with Adapters",id:"integrating-with-adapters",level:2},{value:"Default Context and Custom context",id:"default-context-and-custom-context",level:2}],m={toc:c};function l(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The following examples only work with tRPC over HTTP, you cannot use this framework to support websocket or subscriptions.")),(0,a.kt)("p",null,"First, you need to ensure you have the libs installed, so run this code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save @trpc/server\n")),(0,a.kt)("p",null,"Then, you just need to use the ",(0,a.kt)("a",{parentName:"p",href:"../../api/Frameworks/TrpcFramework"},"TrpcFramework")," when you create your adapter, like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="index.ts"',title:'"index.ts"'},"import * as trpc from '@trpc/server';\nimport { ServerlessAdapter } from '@h4ad/serverless-adapter';\nimport { TrpcFramework, TrpcAdapterContext, TrpcFrameworkOptions, BufferToJSObjectTransformer } from '@h4ad/serverless-adapter/lib/frameworks/trpc';\nimport { z } from 'zod';\n\ntype CustomContext = { currentDate: Date };\ntype TrpcContext = TrpcAdapterContext<CustomContext>;\n\nconst appRouter = trpc\n  .router<TrpcContext>()\n  .transformer(new BufferToJSObjectTransformer())\n  .query('getUser', {\n    input: z.string(),\n    async resolve(req) {\n      req.input; // string\n      return { id: req.input, name: 'Bilbo' };\n    },\n  })\n  .mutation('createUser', {\n    // validate input with Zod\n    input: z.object({ name: z.string().min(5) }),\n    async resolve({ input }) {\n      return {\n        created: true,\n        newName: input.name,\n      };\n    },\n  });\n\nconst frameworkOptions: TrpcFrameworkOptions<CustomContext> = {\n  createContext: () => ({ currentDate: new Date() }),\n};\n\nconst framework = new TrpcFramework<TrpcContext>(frameworkOptions);\n\nexport const handler = ServerlessAdapter.new(appRouter)\n  .setFramework(framework)\n  // continue to set the other options here.\n  //.setHandler(new DefaultHandler())\n  //.setResolver(new PromiseResolver())\n  //.addAdapter(new AlbAdapter())\n  //.addAdapter(new SQSAdapter())\n  //.addAdapter(new SNSAdapter())\n  // after put all methods necessary, just call the build method.\n  .build();\n")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Always add the ",(0,a.kt)("a",{parentName:"p",href:"../../api/Frameworks/TrpcFramework/BufferToJSObjectTransformer"},"BufferToJSObjectTransformer")," because the input can be a buffer\nwhen you sent some JSON inside ",(0,a.kt)("inlineCode",{parentName:"p"},"body")," on mutation, so this transformer will be responsible to convert back to JS Object.")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Need more examples? See more examples ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/H4ad/serverless-adapter-examples#trpc"},"here"),".")),(0,a.kt)("h2",{id:"integrating-with-adapters"},"Integrating with Adapters"),(0,a.kt)("p",null,"This framework is a little special when dealing with request URLs because of the structure of tRPC."),(0,a.kt)("p",null,"So when you integrate with an adapter like ",(0,a.kt)("a",{parentName:"p",href:"/docs/main/adapters/aws/sqs"},"SQSAdapter"),", when you receive an event, the adapter will forward the request to ",(0,a.kt)("inlineCode",{parentName:"p"},"/sqs")," by default\nbut because of the structure of tRPC, the framework will change the request URL to just ",(0,a.kt)("inlineCode",{parentName:"p"},"sqs"),"."),(0,a.kt)("p",null,"With this behavior, to integrate with ",(0,a.kt)("a",{parentName:"p",href:"/docs/main/adapters/aws/sqs"},"SQSAdapter"),", you will create the following mutation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="index.ts"',title:'"index.ts"'},"import type { SQSEvent } from 'aws-lambda';\nimport * as trpc from '@trpc/server';\nimport { TrpcAdapterContext, BufferToJSObjectTransformer } from '@h4ad/serverless-adapter/lib/frameworks/trpc';\nimport { z } from 'zod';\n\ntype TrpcContext = TrpcAdapterContext<unknown>;\n\nconst appRouter = trpc\n  .router<TrpcContext>()\n  .transformer(new BufferToJSObjectTransformer())\n  .mutation('sqs', {\n    input: z.object({\n      Records: z.array(z.any()),\n    }),\n    async resolve({ input, ctx }) {\n      if (ctx.getHeader('host') !== 'sqs.amazonaws.com')\n        throw new TRPCError({\n          code: 'UNAUTHORIZED',\n          message: 'Wrong host.',\n        });\n\n      const event = input as SQSEvent;\n\n      // Do whatever you want\n      // and you dont need to return nothing\n    },\n  });\n")),(0,a.kt)("admonition",{title:"About another adapters",type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Never forget to check the host header as you could introduce a security hole when adding support for AWS Api Gateway and other adapters.")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"You can see a working example ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/H4ad/serverless-adapter-examples/tree/master/src/trpc/aws/api-gateway-v2-and-sqs.entry.ts"},"here"),".")),(0,a.kt)("h2",{id:"default-context-and-custom-context"},"Default Context and Custom context"),(0,a.kt)("p",null,"By default, we provide you with a few methods to get information from the request and modify the response,\nto learn more, take a look at ",(0,a.kt)("a",{parentName:"p",href:"../../api/Frameworks/TrpcFramework/TrpcAdapterBaseContext"},"TrpcAdapterBaseContext"),"."),(0,a.kt)("p",null,"Also, you can pass new properties to the context by setting the ",(0,a.kt)("inlineCode",{parentName:"p"},"createContext")," function inside the options,\nlike the code below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="index.ts"',title:'"index.ts"'},"import * as trpc from '@trpc/server';\nimport { ServerlessAdapter } from '@h4ad/serverless-adapter';\nimport { TrpcFramework, TrpcAdapterContext, BufferToJSObjectTransformer, TrpcFrameworkOptions } from '@h4ad/serverless-adapter/lib/frameworks/trpc';\n\ntype CustomContext = { potato: boolean };\ntype TrpcContext = TrpcAdapterContext<CustomContext>;\n\nconst appRouter = trpc\n  .router<TrpcContext>()\n  .transformer(new BufferToJSObjectTransformer())\n  .mutation('add', {\n    async resolve({ ctx }) {\n      // get the request url\n      const requestUrl = ctx.getUrl();\n\n      // this will change the status code of the request to 204.\n      ctx.setStatus(204);\n    },\n  });\n\nconst frameworkOptions: TrpcFrameworkOptions<TrpcContext> = {\n  // you can return a promise\n  createContext: () => Promise.resolve({ potato: true }),\n  // createContext: () => ({ potato: false }),\n};\n\nconst framework = new TrpcFramework<TrpcContext>(frameworkOptions);\n\nexport const handler = ServerlessAdapter.new(appRouter)\n  .setFramework(framework)\n  // continue to set the other options here.\n  //.setHandler(new DefaultHandler())\n  //.setResolver(new PromiseResolver())\n  //.addAdapter(new AlbAdapter())\n  //.addAdapter(new SQSAdapter())\n  //.addAdapter(new SNSAdapter())\n  // after put all methods necessary, just call the build method.\n  .build();\n")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Is your application instance creation asynchronous? Look the ",(0,a.kt)("a",{parentName:"p",href:"./lazy"},"LazyFramework")," which helps you in asynchronous startup.")))}l.isMDXComponent=!0}}]);