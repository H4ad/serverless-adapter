"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8276],{7839:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var t=r(5893),s=r(1151);const i={title:"EventBridge (CloudWatch Events)",description:"See more about how to integrate with AWS EventBridge."},a=void 0,o={id:"main/adapters/aws/event-bridge",title:"EventBridge (CloudWatch Events)",description:"See more about how to integrate with AWS EventBridge.",source:"@site/docs/main/adapters/aws/event-bridge.mdx",sourceDirName:"main/adapters/aws",slug:"/main/adapters/aws/event-bridge",permalink:"/docs/main/adapters/aws/event-bridge",draft:!1,unlisted:!1,editUrl:"https://github.com/H4ad/serverless-adapter/tree/main/www/docs/main/adapters/aws/event-bridge.mdx",tags:[],version:"current",frontMatter:{title:"EventBridge (CloudWatch Events)",description:"See more about how to integrate with AWS EventBridge."},sidebar:"main",previous:{title:"DynamoDB",permalink:"/docs/main/adapters/aws/dynamodb"},next:{title:"Function URLs",permalink:"/docs/main/adapters/aws/function-url"}},d={},c=[{value:"Typescript",id:"typescript",level:2},{value:"About the adapter",id:"about-the-adapter",level:2},{value:"Schedule Expression",id:"schedule-expression",level:3},{value:"Customizing",id:"customizing",level:2},{value:"Usage",id:"usage",level:2},{value:"Security",id:"security",level:2},{value:"What happens when my response status is different from 2xx or 3xx?",id:"what-happens-when-my-response-status-is-different-from-2xx-or-3xx",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The adapter to handle requests from ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/lambda/latest/dg/services-cloudwatchevents.html",children:"AWS EventBridge"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["The option of ",(0,t.jsx)(n.code,{children:"responseWithErrors"})," is ignored by this adapter and we always call ",(0,t.jsx)(n.code,{children:"resolver.fail"})," with the error."]})}),"\n",(0,t.jsx)(n.h2,{id:"typescript",children:"Typescript"}),"\n",(0,t.jsxs)(n.p,{children:["To correctly type your ",(0,t.jsx)(n.code,{children:"body"})," when receiving the AWS EventBridge request, you must install ",(0,t.jsx)(n.code,{children:"aws-lambda"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm i --save-dev @types/aws-lambda\n"})}),"\n",(0,t.jsxs)(n.p,{children:["So when getting the ",(0,t.jsx)(n.code,{children:"body"})," you should use this type:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="eventbridge.controller.ts"',children:"import type { EventBridgeEvent } from 'aws-lambda';\n"})}),"\n",(0,t.jsx)(n.p,{children:"If you want to integrate with Scheduled Expression, you can use this type:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="eventbridge.controller.ts"',children:"import type { ScheduledEvent } from 'aws-lambda';\n"})}),"\n",(0,t.jsx)(n.h2,{id:"about-the-adapter",children:"About the adapter"}),"\n",(0,t.jsxs)(n.p,{children:["In AWS EventBridge, you don't have requests, you just receive the info from Cloudwatch Events within ",(0,t.jsx)(n.code,{children:"event"})," property of the handler."]}),"\n",(0,t.jsxs)(n.p,{children:["So, in order to handle this adapter, by default we create a ",(0,t.jsx)(n.code,{children:"POST"})," request to ",(0,t.jsx)(n.code,{children:"/eventbridge"})," with the ",(0,t.jsx)(n.code,{children:"body"})," being the ",(0,t.jsx)(n.code,{children:"event"})," property as JSON."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="rds-eventbridge-event-example.json"',children:'{\r\n    "version": "0",\r\n    "id": "fe8d3c65-xmpl-c5c3-2c87-81584709a377",\r\n    "detail-type": "RDS DB Instance Event",\r\n    "source": "aws.rds",\r\n    "account": "123456789012",\r\n    "time": "2020-04-28T07:20:20Z",\r\n    "region": "us-east-2",\r\n    "resources": [\r\n        "arn:aws:rds:us-east-2:123456789012:db:rdz6xmpliljlb1"\r\n    ],\r\n    "detail": {\r\n        "EventCategories": [\r\n            "backup"\r\n        ],\r\n        "SourceType": "DB_INSTANCE",\r\n        "SourceArn": "arn:aws:rds:us-east-2:123456789012:db:rdz6xmpliljlb1",\r\n        "Date": "2020-04-28T07:20:20.112Z",\r\n        "Message": "Finished DB Instance backup",\r\n        "SourceIdentifier": "rdz6xmpliljlb1"\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Normally, your framework will parse this JSON and return the parsed values as javascript objects."}),"\n",(0,t.jsx)(n.h3,{id:"schedule-expression",children:"Schedule Expression"}),"\n",(0,t.jsxs)(n.p,{children:["With ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/lambda/latest/dg/services-cloudwatchevents-expressions.html",children:"Schedule Expression"}),", you have the following JSON when the event is triggered:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="scheduled-eventbridge-event-example.json"',children:'{\r\n  "version": "0",\r\n  "account": "123456789012",\r\n  "region": "us-east-2",\r\n  "detail": {},\r\n  "detail-type": "Scheduled Event",\r\n  "source": "aws.events",\r\n  "time": "2019-03-01T01:23:45Z",\r\n  "id": "cdc73f9d-aea9-11e3-9d5a-835b769c0d9c",\r\n  "resources": [\r\n    "arn:aws:events:us-east-2:123456789012:rule/my-schedule"\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"It's good enough if you want to integrate with just one cron job, but what if you want more?"}),"\n",(0,t.jsxs)(n.p,{children:["One option is to check the ",(0,t.jsx)(n.code,{children:"resources"})," property, but I don't like that solution, so I'll introduce it to you in a way."]}),"\n",(0,t.jsxs)(n.p,{children:["When selecting the target as AWS Lambda, you can configure in ",(0,t.jsx)(n.code,{children:"Additional Settings"})," the ",(0,t.jsx)(n.code,{children:"input target"})," as ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-transform-target-input.html",children:"Input Transformer"}),",\r\nwith this option you can modify the above JSON into something different or add new properties."]}),"\n",(0,t.jsxs)(n.p,{children:["After clicking ",(0,t.jsx)(n.code,{children:"Configure Input Transformer"}),", you can choose the ",(0,t.jsx)(n.code,{children:"Scheduled Event"})," in the sample event to get an idea of what the event will look like after the transformation."]}),"\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.code,{children:"Input Path"})," inside the Target Input Transformer you will put this json:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="input-path.json"',children:'{\r\n  "account": "$.account",\r\n  "detail-type": "$.detail-type",\r\n  "id": "$.id",\r\n  "region": "$.region",\r\n  "resources": "$.resources",\r\n  "source": "$.source",\r\n  "time": "$.time",\r\n  "version": "$.version"\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["And inside ",(0,t.jsx)(n.code,{children:"Template"}),", you will put this json:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "version": "<version>",\r\n  "id": "<id>",\r\n  "detail-type": "<detail-type>",\r\n  "source": "<source>",\r\n  "account": "<account>",\r\n  "time": "<time>",\r\n  "region": "<region>",\r\n  "resources": [],\r\n  "detail": {\r\n    "action": "my_25min_cron"\r\n  }\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Did you see the ",(0,t.jsx)(n.code,{children:"action"})," inside the details? This property will be added when the event comes from Schedule Expression,\r\nwith this property you can differentiate which cron was called."]}),"\n",(0,t.jsx)(n.p,{children:"Inside your controller, you can write code like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="event-bridge.controller.ts"',children:"import type { ScheduledEvent } from 'aws-lambda';\r\n\r\n// inside your controller method\r\ntype ScheduleEventWithAction = ScheduledEvent<{ action: 'my_25min_cron' | 'my_50min_cron' }>;\r\nconst scheduleEvent = request.body as unknown as ScheduleEventWithAction;\r\n\r\nswitch(scheduleEvent.detail.action) {\r\n  case 'my_25min_cron':\r\n    console.log('Your 25 min schedule expression was called.');\r\n    break;\r\n  case 'my_50min_cron':\r\n    console.log('Your 50 min schedule expression was called.');\r\n    break;\r\n  default:\r\n    console.error('The action was not recognized.');\r\n    break;\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"customizing",children:"Customizing"}),"\n",(0,t.jsxs)(n.p,{children:["You can change the HTTP Method and Path that will be used to create the request by sending ",(0,t.jsx)(n.code,{children:"eventBridgeForwardMethod"})," and ",(0,t.jsx)(n.code,{children:"eventBridgeForwardPath"})," inside ",(0,t.jsx)(n.a,{href:"/docs/api/Adapters/AWS/EventBridgeAdapter/EventBridgeOptions",children:"EventBridgeOptions"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.p,{children:"To add support to AWS EventBridge you do the following:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="index.ts"',children:"import { ServerlessAdapter } from '@h4ad/serverless-adapter';\r\nimport { EventBridgeAdapter } from '@h4ad/serverless-adapter/lib/adapters/aws';\r\nimport { DefaultHandler } from '@h4ad/serverless-adapter/lib/handlers/default';\r\nimport app from './app';\r\n\r\nexport const handler = ServerlessAdapter.new(app)\r\n  .setHandler(new DefaultHandler())\r\n  // .setFramework(new ExpressFramework())\r\n  // .setResolver(new PromiseResolver())\r\n  .addAdapter(new EventBridgeAdapter())\r\n  // customizing:\r\n  // .addAdapter(new EventBridgeAdapter({ eventBridgeForwardPath: '/prod/eventbridge', eventBridgeForwardMethod: 'PUT' }))\r\n  .build();\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["When you configure your API with some ",(0,t.jsx)(n.code,{children:"basePath"})," like ",(0,t.jsx)(n.code,{children:"/prod"}),", you should set ",(0,t.jsx)(n.code,{children:"eventBridgeForwardPath"})," as ",(0,t.jsx)(n.code,{children:"/prod/eventbridge"})," instead leave as default ",(0,t.jsx)(n.code,{children:"/eventbridge"}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"security",children:"Security"}),"\n",(0,t.jsxs)(n.p,{children:["You ",(0,t.jsx)(n.strong,{children:"MUST"})," check if the header ",(0,t.jsx)(n.code,{children:"Host"})," contains the value of ",(0,t.jsx)(n.code,{children:"events.amazonaws.com"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Without checking this header, if you add this adapter and ",(0,t.jsx)(n.a,{href:"./api-gateway-v2",children:"AWS API Gateway V2"})," adapter, you will be vulnerable to attacks\r\nbecause anyone can create a ",(0,t.jsx)(n.code,{children:"POST"})," request to ",(0,t.jsx)(n.code,{children:"/eventbridge"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"what-happens-when-my-response-status-is-different-from-2xx-or-3xx",children:"What happens when my response status is different from 2xx or 3xx?"}),"\n",(0,t.jsx)(n.p,{children:"Well, this library will throw an error.\r\nIn previous versions of this library, the behavior was different, but now we throw an error if the status does not indicate success."}),"\n",(0,t.jsx)(n.p,{children:"When it throws an error, the request will simply fail to process the event, and depending on how you set up your dead-letter queue or your retry police,\r\ncan be sent to dead-letter queue for you to check what happens or try again."})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>a});var t=r(7294);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);