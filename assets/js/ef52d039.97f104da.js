"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9684],{8069:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var t=r(5893),a=r(1151);const s={title:"DynamoDB",description:"See more about how to integrate with AWS DynamoDB."},o=void 0,d={id:"main/adapters/aws/dynamodb",title:"DynamoDB",description:"See more about how to integrate with AWS DynamoDB.",source:"@site/docs/main/adapters/aws/dynamodb.mdx",sourceDirName:"main/adapters/aws",slug:"/main/adapters/aws/dynamodb",permalink:"/docs/main/adapters/aws/dynamodb",draft:!1,unlisted:!1,editUrl:"https://github.com/H4ad/serverless-adapter/tree/main/www/docs/main/adapters/aws/dynamodb.mdx",tags:[],version:"current",frontMatter:{title:"DynamoDB",description:"See more about how to integrate with AWS DynamoDB."},sidebar:"main",previous:{title:"Api Gateway V2",permalink:"/docs/main/adapters/aws/api-gateway-v2"},next:{title:"EventBridge (CloudWatch Events)",permalink:"/docs/main/adapters/aws/event-bridge"}},i={},l=[{value:"Typescript",id:"typescript",level:2},{value:"About the adapter",id:"about-the-adapter",level:2},{value:"Customizing",id:"customizing",level:2},{value:"Usage",id:"usage",level:2},{value:"Security",id:"security",level:2},{value:"What happens when my response status is different from 2xx or 3xx?",id:"what-happens-when-my-response-status-is-different-from-2xx-or-3xx",level:2},{value:"Batch Item Failures",id:"batch-item-failures",level:2}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The adapter to handle requests from ",(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html",children:"AWS DynamoDB"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["The option of ",(0,t.jsx)(n.code,{children:"responseWithErrors"})," is ignored by this adapter and we always call ",(0,t.jsx)(n.code,{children:"resolver.fail"})," with the error."]})}),"\n",(0,t.jsx)(n.h2,{id:"typescript",children:"Typescript"}),"\n",(0,t.jsxs)(n.p,{children:["To correctly type your ",(0,t.jsx)(n.code,{children:"body"})," when receiving the AWS DynamoDB request, you must install ",(0,t.jsx)(n.code,{children:"aws-lambda"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm i --save-dev @types/aws-lambda\n"})}),"\n",(0,t.jsxs)(n.p,{children:["So when getting the ",(0,t.jsx)(n.code,{children:"body"})," you should use this type:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="dynamodb.controller.ts"',children:"import type { DynamoDBStreamEvent } from 'aws-lambda';\n"})}),"\n",(0,t.jsx)(n.h2,{id:"about-the-adapter",children:"About the adapter"}),"\n",(0,t.jsxs)(n.p,{children:["In AWS DynamoDB, you don't have requests, you just receive the records in the ",(0,t.jsx)(n.code,{children:"event"})," property of the handler."]}),"\n",(0,t.jsxs)(n.p,{children:["So, in order to handle this adapter, by default we create a ",(0,t.jsx)(n.code,{children:"POST"})," request to ",(0,t.jsx)(n.code,{children:"/dynamo"})," with the ",(0,t.jsx)(n.code,{children:"body"})," being the ",(0,t.jsx)(n.code,{children:"event"})," property as JSON."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",metastring:'title="dynamodb-event-example.json"',children:'{\r\n  "Records": [\r\n    {\r\n      "eventID": "1",\r\n      "eventVersion": "1.0",\r\n      "dynamodb": {\r\n        "Keys": {\r\n          "Id": {\r\n            "N": "101"\r\n          }\r\n        },\r\n        "NewImage": {\r\n          "Message": {\r\n            "S": "New item!"\r\n          },\r\n          "Id": {\r\n            "N": "101"\r\n          }\r\n        },\r\n        "StreamViewType": "NEW_AND_OLD_IMAGES",\r\n        "SequenceNumber": "111",\r\n        "SizeBytes": 26\r\n      },\r\n      "awsRegion": "us-west-2",\r\n      "eventName": "INSERT",\r\n      "eventSourceARN": "arn:aws:dynamodb:us-east-1:111122223333:table/EventSourceTable",\r\n      "eventSource": "aws:dynamodb"\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Normally, your framework will parse this JSON and return the parsed values as javascript objects."}),"\n",(0,t.jsx)(n.h2,{id:"customizing",children:"Customizing"}),"\n",(0,t.jsxs)(n.p,{children:["You can change the HTTP Method and Path that will be used to create the request by sending ",(0,t.jsx)(n.code,{children:"dynamoDBForwardMethod"})," and ",(0,t.jsx)(n.code,{children:"dynamoDBForwardPath"})," inside ",(0,t.jsx)(n.a,{href:"/docs/api/Adapters/AWS/DynamoDBAdapter/DynamoDBAdapterOptions",children:"DynamoDBAdapterOptions"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.p,{children:"To add support to AWS DynamoDB you do the following:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="index.ts"',children:"import { ServerlessAdapter } from '@h4ad/serverless-adapter';\r\nimport { DynamoDBAdapter } from '@h4ad/serverless-adapter/lib/adapters/aws';\r\nimport { DefaultHandler } from '@h4ad/serverless-adapter/lib/handlers/default';\r\nimport app from './app';\r\n\r\nexport const handler = ServerlessAdapter.new(app)\r\n  .setHandler(new DefaultHandler())\r\n  // .setFramework(new ExpressFramework())\r\n  // .setResolver(new PromiseResolver())\r\n  .addAdapter(new DynamoDBAdapter())\r\n  // customizing:\r\n  // .addAdapter(new DynamoDBAdapter({ dynamoDBForwardPath: '/prod/dynamo', dynamoDBForwardMethod: 'PUT' }))\r\n  .build();\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["When you configure your API with some ",(0,t.jsx)(n.code,{children:"basePath"})," like ",(0,t.jsx)(n.code,{children:"/prod"}),", you should set ",(0,t.jsx)(n.code,{children:"dynamoDBForwardPath"})," as ",(0,t.jsx)(n.code,{children:"/prod/dynamo"})," instead leave as default ",(0,t.jsx)(n.code,{children:"/dynamo"}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"security",children:"Security"}),"\n",(0,t.jsxs)(n.p,{children:["You ",(0,t.jsx)(n.strong,{children:"MUST"})," check if the header ",(0,t.jsx)(n.code,{children:"Host"})," contains the value of ",(0,t.jsx)(n.code,{children:"dynamodb.amazonaws.com"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Without checking this header, if you add this adapter and ",(0,t.jsx)(n.a,{href:"./api-gateway-v2",children:"AWS API Gateway V2"})," adapter, you will be vulnerable to attacks\r\nbecause anyone can create a ",(0,t.jsx)(n.code,{children:"POST"})," request to ",(0,t.jsx)(n.code,{children:"/dynamo"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"what-happens-when-my-response-status-is-different-from-2xx-or-3xx",children:"What happens when my response status is different from 2xx or 3xx?"}),"\n",(0,t.jsx)(n.p,{children:"Well, this library will throw an error.\r\nIn previous versions of this library, the behavior was different, but now we throw an error if the status does not indicate success."}),"\n",(0,t.jsx)(n.p,{children:"When it throws an error, the request will simply fail to process the event, and depending on how you set up your dead-letter queue or your retry police,\r\ncan be sent to dead-letter queue for you to check what happens or try again."}),"\n",(0,t.jsx)(n.h2,{id:"batch-item-failures",children:"Batch Item Failures"}),"\n",(0,t.jsx)(n.p,{children:"If you enable this batch item failure option, to be able to partially return that some items failed to process, first configure your Adapter:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const adapter = new DynamoDBAdapter({\r\n  batch: true,\r\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"And then, just return the following JSON in the route that processes the DynamoDB event."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\r\n  "batchItemFailures": [\r\n    {\r\n        "itemIdentifier": "id2"\r\n    },\r\n    {\r\n        "itemIdentifier": "id4"\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-batchfailurereporting",children:"Reference"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>d,a:()=>o});var t=r(7294);const a={},s=t.createContext(a);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);