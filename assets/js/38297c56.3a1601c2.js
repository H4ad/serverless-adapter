"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6226],{7888:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var t=r(4848),a=r(8453);const s={},o=void 0,l={id:"api/Handlers/AzureHandler/AzureHandlerOptions",title:"AzureHandlerOptions",description:"@h4ad/serverless-adapter &gt; AzureHandlerOptions",source:"@site/docs/api/Handlers/AzureHandler/AzureHandlerOptions.md",sourceDirName:"api/Handlers/AzureHandler",slug:"/api/Handlers/AzureHandler/AzureHandlerOptions",permalink:"/docs/api/Handlers/AzureHandler/AzureHandlerOptions",draft:!1,unlisted:!1,editUrl:"https://github.com/H4ad/serverless-adapter/tree/main/www/docs/api/Handlers/AzureHandler/AzureHandlerOptions.md",tags:[],version:"current",frontMatter:{},sidebar:"api",previous:{title:"AzureHandler",permalink:"/docs/api/Handlers/AzureHandler/"},next:{title:"RawRequest",permalink:"/docs/api/Handlers/Base/RawRequest/"}},i={},d=[{value:"(interface) AzureHandlerOptions",id:"interface-azurehandleroptions",level:2},{value:"(property) useContextLogWhenInternalLogger",id:"property-usecontextlogwheninternallogger",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/docs/api/Introduction",children:"@h4ad/serverless-adapter"})," > ",(0,t.jsx)(n.a,{href:"/docs/api/Handlers/AzureHandler/AzureHandlerOptions",children:"AzureHandlerOptions"})]}),"\n",(0,t.jsx)(n.h2,{id:"interface-azurehandleroptions",children:"(interface) AzureHandlerOptions"}),"\n",(0,t.jsxs)(n.p,{children:["The options to customize ",(0,t.jsx)(n.a,{href:"/docs/api/Handlers/AzureHandler",children:"AzureHandler"})]}),"\n",(0,t.jsx)(n.p,{children:"Signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"export interface AzureHandlerOptions \n"})}),"\n",(0,t.jsx)(n.h2,{id:"property-usecontextlogwheninternallogger",children:"(property) useContextLogWhenInternalLogger"}),"\n",(0,t.jsx)(n.p,{children:"Indicates to use the context log instead console.log when logger is internal (created by the library)"}),"\n",(0,t.jsx)(n.p,{children:"Signature:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"useContextLogWhenInternalLogger: boolean;\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var t=r(6540);const a={},s=t.createContext(a);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);